#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  tflare1, tflare2, base, lflare1, launcher, door1, door2, lflare2,
       lflare3, bubbles1, bubbles2, aimh, aimv;

static-var  restore_delay, gun_1;

// Signal definitions
#define SIG_MOVE			8
#define SIG_AIM				2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide launcher;
	gun_1 = [0];
	restore_delay = 3000;
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn aimh to y-axis <0.000000> speed <80.000000>;
	turn aimv to x-axis <0.000000> speed <80.000000>;	
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from bubbles1;
		emit-sfx 256 | 3 from bubbles2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	// heading and pitch check
	if(heading > <60.000000> || heading < <-60.000000>)
	{
		return (0);
	}
	if(pitch > <60.000000> || pitch < <-60.000000>)
	{
		return (0);
	}
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	turn aimh to y-axis heading speed <80.000000>;
	turn aimv to x-axis <0.000000>-pitch speed <80.000000>;
	wait-for-turn aimh around y-axis;
	wait-for-turn aimv around x-axis;
	
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == [0] )
	{
		sleep 100;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1] )
	{
		sleep 100;
		gun_1 = [0];
		return (0);
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = base;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = tflare1;
	}
	if( gun_1 == [1] )
	{
		piecenum = tflare2;
	}
	return (0);
}

AimSecondary(heading, pitch)
{
	return (1);
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = lflare1;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = lflare1;
	return (0);
}

FireSecondary()
{
	return (0);
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles1 type BITMAPONLY | BITMAP2;
		explode bubbles2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode tflare1 type BITMAPONLY | BITMAP5;
		explode tflare2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles1 type FALL | BITMAP2;
		explode bubbles2 type FALL | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode tflare1 type FALL | BITMAP5;
		explode tflare2 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode bubbles1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode bubbles2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode tflare1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode tflare2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode bubbles1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode bubbles2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode tflare1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode tflare2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
