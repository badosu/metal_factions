#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 100

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, pivot, wake1, wake2, tbase, spinner, bottom, b2, d2, s1, s2,s3,d3, base2,base3, turret, sleeve,barrel,flare,b22,s22,ldoor1,rdoor1, dustbase,dustpt1,dustpt2,dustpt3;

static-var  bAiming, bSwimming, terrainStatus, waterSpeed, landSpeed, lastHeading, isDeployed, isDeploying;

lua_setMobility() { return 0; }

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4

#include "spinbot.h"



shake()
{
	set CEG_DAMAGE to 10;
	play-sound( "burrow", 15 );
	spin dustbase around y-axis speed <920>;
	emit-sfx 1024+1 from dustpt1;
	emit-sfx 1024+1 from dustpt2;
	turn base to z-axis <2> speed <300>;
	sleep 30;
	emit-sfx 1024+1 from dustpt1;
	emit-sfx 1024+1 from dustpt3;	
	turn base to z-axis <-2> speed <300>;
	sleep 30;
	emit-sfx 1024+1 from dustpt2;
	emit-sfx 1024+1 from dustpt3;	
	turn base to z-axis <2> speed <300>;
	sleep 30;
	emit-sfx 1024+1 from dustpt1;
	emit-sfx 1024+1 from dustpt2;
	turn base to z-axis <-2> speed <300>;
	sleep 30;
	emit-sfx 1024+1 from dustpt1;
	emit-sfx 1024+1 from dustpt3;
	turn base to z-axis <2> speed <300>;
	sleep 30;
	emit-sfx 1024+1 from dustpt2;
	emit-sfx 1024+1 from dustpt3;
	turn base to z-axis <-2> speed <300>;
	sleep 30;
	emit-sfx 1024+1 from dustpt1;
	emit-sfx 1024+1 from dustpt2;
	turn base to z-axis <2> speed <300>;
	sleep 30;
	emit-sfx 1024+1 from dustpt1;
	emit-sfx 1024+1 from dustpt3;
	turn base to z-axis <-2> speed <300>;
	sleep 30;
	emit-sfx 1024+1 from dustpt2;
	emit-sfx 1024+1 from dustpt3;
	turn base to z-axis <2> speed <300>;
	sleep 30;
	turn base to z-axis <-2> speed <300>;
	sleep 30;
	turn base to z-axis <2> speed <300>;
	sleep 30;
	turn base to z-axis <-2> speed <300>;
	sleep 30;
	turn base to z-axis <0> speed <300>;
}

deploy()
{
	if (!isDeployed)
	{
		call-script lua_setMobility(0);
		
		// burrow
		spin spinner around y-axis speed <800.000000>;
		move base to y-axis [-4] speed [8];
		move dustbase to y-axis [4] speed [8];
		call-script shake();
		move base to y-axis [-8] speed [8];
		move dustbase to y-axis [8] speed [8];
		call-script shake();
		spin spinner around y-axis speed <400.000000>;
		move base to y-axis [-12] speed [8];
		move dustbase to y-axis [12] speed [8];
		call-script shake();
		spin spinner around y-axis speed <100.000000>;
		call-script shake();
		stop-spin spinner around y-axis;
		
		// open
		move ldoor1 to x-axis [-6.7] speed [8];
		move rdoor1 to x-axis [6.7] speed [8];
		wait-for-move ldoor1 along x-axis;
		move barrel to z-axis [0] speed [18];
		move s22 to z-axis [0] speed [18];
		wait-for-move barrel along x-axis;
		
		isDeployed = TRUE;
	}
}

undeploy()
{
	if (isDeployed)
	{
		isDeployed = FALSE;

		turn tbase to y-axis <0> speed <80>;
		turn sleeve to x-axis <0> speed <80>;
		wait-for-turn tbase around y-axis;
		wait-for-turn sleeve around x-axis;
		
		// unburrow
		move base to y-axis [0] speed [12];
		move dustbase to y-axis [0] speed [12];
		spin spinner around y-axis speed <800.000000>;
		call-script shake();
		spin spinner around y-axis speed <200.000000>;
		
		move barrel to z-axis [-13] speed [18];
		move s22 to z-axis [-5] speed [5];
		wait-for-move barrel along z-axis;
		wait-for-move base along x-axis;
		call-script lua_setMobility(100);
		
		// close
		move ldoor1 to x-axis [0] speed [8];
		move rdoor1 to x-axis [0] speed [8];
		wait-for-move ldoor1 along x-axis;
		
		
	}
}


Activate()
{

}

Deactivate()
{
}


handleActivation()
{
	while (TRUE)
	{ 
		if (get ACTIVATION) 
		{
			if ((terrainStatus == 2 OR terrainStatus == 1)) 
			{
				call-script undeploy();
			}
			else
			{
				call-script deploy();
			}
		}
		else
		{
			call-script undeploy();
		}
		sleep 100;
	}
}


recoil(anglex, anglez)
{
	anglex = <-1.000000> * (get KCOS(lastHeading)) / 100;
	anglez = <-1.000000> * (get KSIN(lastHeading)) / 100;
	
	turn base to x-axis anglex speed <150.005495>;
	turn base to z-axis anglez speed <150.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

stopWheels()
{
	if (get BUILD_PERCENT_LEFT) 
	{
		stop-spin spinner around y-axis;
		return (0);
	}

	if (GET ACTIVATION)
	{
		stop-spin spinner around y-axis;
	}
	else
	{
		spin spinner around y-axis speed <200.000000>;
	}
	return (0);
}


walk(last)
{
	last = 0;
	while ( TRUE )
	{
		
		if ( last != (wheelSpeed / 8) )
		{
			spin spinner around y-axis speed <200.000000> + wheelSpeed; // accelerate wheelAcceleration;
			last = wheelSpeed / 8;
		}
		turn pivot to x-axis pivotAngle speed <30.000000>;
		sleep 100;
	}
	return (0);
}



closelegs()
{
	// nothing to do here
	call-script stopWheels();
	sleep 100;
	return (0);
}

openlegs()
{
	// nothing to do here
	sleep 100;

	return (0);
}

swim()
{
	sleep 500;
	call-script closelegs();
	return (0);
}

MotionControl(justMoved)
{
	justMoved = TRUE;
	while( TRUE )
	{
		// over water
		if( ( !bSwimming ) AND (terrainStatus == 2 OR terrainStatus == 1))
		{
			call-script closelegs();
			bSwimming = TRUE;
			justMoved = TRUE;
		}
		// over land
		if( bSwimming AND terrainStatus == 4 )
		{
			call-script openlegs();
			bSwimming = FALSE;
			justMoved = TRUE;
		}
		if( bMoving )
		{
			if( bSwimming )
			{
				//set MAX_SPEED to waterSpeed; // REPLACED BY GADGET
				//set UPRIGHT to TRUE;
				call-script walk();
			}
			if( !bSwimming )
			{
				//set MAX_SPEED to landSpeed; // REPLACED BY GADGET
				//set UPRIGHT to FALSE;
				call-script walk();
			}
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			if( justMoved AND ( !bSwimming ) )
			{
				call-script stopWheels();
	
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	landSpeed = get MAX_SPEED;
	waterSpeed = landSpeed * 100/150;
	//landSpeed = waterSpeed;	// same as land
	move barrel to z-axis [-13] now;
	move s22 to z-axis [-5] now;
	bMoving = FALSE;
	bAiming = FALSE;
	bSwimming = FALSE;
	isDeployed = FALSE;
	lastHeading = 0;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script MotionControl();
	start-script WheelSpeedControl();
	start-script SmokeUnit();
	start-script handleActivation();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainStatus == 2 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		if( terrainStatus == 1 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<80>,<80>);
	turn tbase to y-axis <0.000000> speed <80.000000>;
	turn sleeve to x-axis <0.000000> speed <80.000000>;
	lastHeading = 0;
	return (0);
}


AimPrimary(heading, pitch)
{
	if (!isDeployed)
	{
		return 0;
	}

	call-script updateAimHelper1(heading,pitch,<80>,<80>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn tbase to y-axis heading speed <80.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <80.000000>;
	if (!aimReady1)
	{
		wait-for-turn tbase around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	lastHeading = heading;
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	move barrel to z-axis [-6.000000] now;
	emit-sfx 1024 from flare;
	//call-script recoil();
	sleep 130;
	move barrel to z-axis [0.00000] speed [4.000000];
	return (1);
}


AimFromPrimary(piecenum)
{
	piecenum = tbase;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = tbase;
	return (0);
}




Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER;
		explode base2 type SHATTER;
		explode base3 type SHATTER;
		return (1);
	}
	explode base2 type SHATTER;
	explode base3 type SHATTER;
	explode turret type SHATTER;
	explode sleeve type SHATTER;
	explode barrel type SHATTER;
	explode spinner type SHATTER;
	return (2);
}
