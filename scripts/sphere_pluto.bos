#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torp1, torp2, torp3, base, wake, wake2, lprop, rprop, h2, front, back, barrel1, barrel2, barrel3, aimh, aimv, turret,door1,door2,hole,mispt, p1, p2, p3, p4, f2, stabilizer, stabilizer2;

static-var  gun_1;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM2			8


Activate()
{

	//move base to y-axis [25.000000] speed [10.000000];
	//emit-sfx 256 | 3 from p1;
	//emit-sfx 256 | 3 from p2;
	//emit-sfx 256 | 3 from p3;
	//emit-sfx 256 | 3 from p4;
	//sleep 2000;
	//emit-sfx 2 from p1;
	//emit-sfx 2 from p2;
	//emit-sfx 2 from p3;
	//emit-sfx 2 from p4;	
}

Deactivate()
{
	move base to y-axis [0.000000] speed [10.000000];
}

Create()
{
	gun_1 = [0];
	return (0);
}



StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from wake;
		emit-sfx 256 | 3 from wake2;
		sleep 350;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn aimh to y-axis <0.000000> speed <80.000000>;
	turn aimv to x-axis <0.000000> speed <80.000000>;	
	
}

FirePrimary()
{
	if(gun_1 == [0])
	{
		sleep 100;
		gun_1 = [1];
		return (0);
	}
	if(gun_1 == [1])
	{
		sleep 100;
		gun_1 = [2];
		return (0);
	}		
	if(gun_1 == [2])
	{
		sleep 100;
		gun_1 = [0];
		return (0);
	}		

}

AimPrimary(heading, pitch)
{
	// heading and pitch check
	if(heading > <60.000000> || heading < <-60.000000>)
	{
		return (0);
	}
	if(pitch > <60.000000> || pitch < <-60.000000>)
	{
		return (0);
	}
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn aimh to y-axis heading speed <80.000000>;
	turn aimv to x-axis <0.000000>-pitch speed <80.000000>;
	wait-for-turn aimh around y-axis;
	wait-for-turn aimv around x-axis;
	
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary( piecenum)
{
	piecenum = aimh;
}

QueryPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum = torp1;
	}
	if(gun_1 == [1])
	{
		piecenum = torp2;
	}		
	if(gun_1 == [2])
	{
		piecenum = torp3;
	}		

	return (0);
}


AimSecondary()
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;

	return (1);
}

FireSecondary()
{
	turn door1 to z-axis <-40.000000> speed <400.000000>;
	turn door2 to z-axis <40.000000> speed <400.000000>;
	emit-sfx 1024 from mispt;
	sleep 1000;
	turn door1 to z-axis <0.000000> speed <80.000000>;
	turn door2 to z-axis <0.000000> speed <80.000000>;
	return (1);
}

AimFromSecondary(piecenum)
{
	piecenum = turret;

}

QuerySecondary(piecenum)
{
	piecenum = mispt;
}



SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode torp1 type BITMAPONLY | BITMAP2;
		explode torp2 type BITMAPONLY | BITMAP3;
		explode wake type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode torp1 type BITMAPONLY | BITMAP2;
		explode torp2 type BITMAPONLY | BITMAP3;
		explode wake type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode torp1 type BITMAPONLY | BITMAP2;
		explode torp2 type BITMAPONLY | BITMAP3;
		explode wake type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode torp1 type BITMAPONLY | BITMAP2;
	explode torp2 type BITMAPONLY | BITMAP3;
	explode wake type BITMAPONLY | BITMAP4;
	return (0);
}
