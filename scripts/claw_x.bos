#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base,hull,bottom,wingsup,h2,h3, weapon1, barrel1,flare1,barrel2,flare2, ljet,rjet, ljp, rjp,bweapon,bflare,sup1,sup2,sup3,sup4,bar1,bar2,bar3,bar4,f1,f2,f3,f4;

static-var  isFlying, statechg_DesiredState, statechg_StateChanging,canaim,gun_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Takeoff()
{
	isFlying = 1;
}

Landing()
{
	turn hull to x-axis <0.000000> speed <70.000000>;
	isFlying = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			start-script Takeoff();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			start-script Landing();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}



Create()
{
	hide flare1;
	hide flare2;
	turn sup1 to y-axis <45> now;
	turn sup2 to y-axis <-45> now;
	turn sup3 to y-axis <-135> now;
	turn sup4 to y-axis <135> now;
	gun_1=0;
	isFlying = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

FirePrimary()
{
	if (gun_1 == 0) {
		emit-sfx 1024+0 from flare1;
		sleep 100;
		gun_1 = 1;
		return (0);
	}
	if (gun_1 == 1) {
		emit-sfx 1024+0 from flare2;
		sleep 100;
		gun_1 = 0;
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0)	{
		piecenum = flare1;
		return (0);
	}
	if (gun_1 == 1)	{
		piecenum = flare2;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = weapon1;
	return (0);
}

AimPrimary(heading, pitch)
{
	return (1);
}

FireWeapon2()
{
	emit-sfx 1024+0 from f1;
}

QueryWeapon2(piecenum)
{
	piecenum = f1;
}

AimFromWeapon2(piecenum)
{
	piecenum = bar1;
	return (0);
}

AimWeapon2(heading, pitch)
{
	return (1);
}



FireWeapon3()
{
	emit-sfx 1024+0 from f2;
}

QueryWeapon3(piecenum)
{
	piecenum = f2;
}

AimFromWeapon3(piecenum)
{
	piecenum = bar2;
	return (0);
}

AimWeapon3(heading, pitch)
{
	return (1);
}




FireWeapon4()
{
	emit-sfx 1024+0 from f3;
}

QueryWeapon4(piecenum)
{
	piecenum = f3;
}

AimFromWeapon4(piecenum)
{
	piecenum = bar3;
	return (0);
}

AimWeapon4(heading, pitch)
{
	return (1);
}



FireWeapon5()
{
	emit-sfx 1024+0 from f4;
}

QueryWeapon5(piecenum)
{
	piecenum = f4;
}

AimFromWeapon5(piecenum)
{
	piecenum = bar4;
	return (0);
}

AimWeapon5(heading, pitch)
{
	return (1);
}

Killed(severity, corpsetype)
{
	corpsetype = 3;
	
	explode h2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode h3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode sup1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode sup2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode sup3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode sup4 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode wingsup type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode ljet type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hull type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode rjet type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
