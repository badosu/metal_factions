#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<30>
#define PITCH_TOLERANCE		<20>

piece  base, b2, weapon1, weapon2, weapon3, weapon4, firept1, firept2, firept3, firept4, turret, sleeve, barrel, flare, lwing, rwing, center,c2, lweapon,rweapon,ljet,rjet,ljet2,rjet2,tbase, lbody,rbody, rw2,lw2,ljp,rjp,ljp2,rjp2;

static-var  gun_1, gun_2, bAiming;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


lua_HeavyGunshipStrafe() { return 0; }

HeavyGunshipStrafe()
{
	while (TRUE)
	{
		if( bAiming )
		{
			//call-script lua_HeavyGunshipStrafe();
		}
		sleep 200;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = [0];
	gun_2 = [0];
	bAiming = FALSE;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	//start-script HeavyGunshipStrafe();
}

Activate()
{
}

Deactivate()
{
}

SweetSpot(piecenum)
{
	piecenum = base;
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<150>,<150>);
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn sleeve to x-axis <0.000000> speed <150.000000>;
	bAiming = FALSE;
	//call-script lua_HeavyGunshipStrafe();
	//turn base to x-axis <0.000000> speed <45.000000>;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

AimSecondary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<400>,<400>,HEADING_TOLERANCE,PITCH_TOLERANCE);	
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	bAiming = TRUE;
	turn turret to y-axis heading speed <400.000000>;
	turn sleeve to x-axis <0.000000>-pitch speed <400.000000>;
	if (!aimReady1 )
	{
		wait-for-turn sleeve around x-axis;
		wait-for-turn turret around y-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_2 == [0] )
	{
		emit-sfx 1024+0 from flare;
		sleep 100;
		turn barrel to z-axis <120.000000> speed <720.000000>;
		gun_2 = [1];
		return 0 ;
	}
	if( gun_2 == [1] )
	{
		emit-sfx 1024+0 from flare;
		sleep 100;
		turn barrel to z-axis <240.000000> speed <720.000000>;
		gun_2 = [2];
		return 0 ;
	}
	if( gun_2 == [2] )
	{
		emit-sfx 1024+0 from flare;
		sleep 100;
		turn barrel to z-axis <360.000000> speed <720.000000>;
		gun_2 = [0];
		return 0 ;
	}

}



QueryPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum = firept1;
		return 0;
	}
	if(gun_1 == [1])
	{
		piecenum = firept2;
		return 0;
	}
	if(gun_1 == [2])
	{
		piecenum = firept3;
		return 0;
	}
	if(gun_1 == [3])
	{
		piecenum = firept4;
		return 0;
	}	
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

Shot1()
{
	if(gun_1 == [0])
	{
		emit-sfx 1024+1 from firept1;
		gun_1 = [1];
		return 0;
	}
	if(gun_1 == [1])
	{
		emit-sfx 1024+1 from firept2;
		gun_1 = [2];
		return 0;
	}
	if(gun_1 == [2])
	{
		emit-sfx 1024+1 from firept3;
		gun_1 = [3];
		return 0;
	}
	if(gun_1 == [3])
	{
		emit-sfx 1024+1 from firept4;
		gun_1 = [0];
		return 0;
	}	
}

AimPrimary()
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	bAiming = TRUE;
	//call-script lua_HeavyGunshipStrafe();
	//turn base to x-axis <-45.000000> speed <45.000000>;
	start-script RestoreAfterDelay();
	return (1);
}


Killed(severity, corpsetype)
{
	corpsetype = 3;
	explode center type SHATTER | BITMAP5;
	explode lw2 type SHATTER | BITMAP5;
	explode rw2 type SHATTER | BITMAP5;
	explode lbody type SHATTER | BITMAP5;
	explode rbody type SHATTER | BITMAP5;
	explode turret type SHATTER | BITMAP1;
	explode ljet type SHATTER | BITMAP1;
	explode rjet type SHATTER | BITMAP1;
	explode lwing type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode rwing type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
