#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, door1, door2, plate, wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8, turret, nano1, nanospray1,nano2, nanospray2, box, walls, w1, w2, b2;

static-var  Static_Var_1, Static_Var_2, Static_Var_5, bBuilding, Static_Var_7, isOpen, nanopt;

// Signal definitions
#define SIG_MOVE			2
#define SIG_BUILD			4

BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= [2.500000] )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 60 / 30;
		}
		turn base to z-axis Func_Var_3 speed <45.000000>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
	return (0);
}

WobbleUnit()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		if( Static_Var_7 == 1 )
		{
			move base to y-axis [4.500000] speed [2.500000];
		}
		if( Static_Var_7 == 0 )
		{
			move base to y-axis [2.000000] speed [2.500000];
		}
		Static_Var_7 = !Static_Var_7;
		sleep 750;
	}
	return (0);
}

RockUnit(anglex, anglez)
{
	turn base to x-axis <0.010989> * anglex speed <50.005495>;
	turn base to z-axis <0.010989> * anglez speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis <0.010989> * Func_Var_2 speed <105.016484>;
	turn base to x-axis <0.010989> * Func_Var_1 speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
	return (0);
}


Build()
{
	while(TRUE)
	{
		if( bBuilding == 1 )
		{
			emit-sfx 1024 + 0 from nanospray1;
			emit-sfx 1024 + 0 from nanospray2;
		}
		sleep 100;
	}
	return (0);
}


activatescr()
{
	if( !isOpen )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-65.714286> speed <400.000000>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <65.258242> speed <400.000000>;
		sleep 230;
		move door1 to y-axis [-7.000000] speed [50.000000];
		move door2 to y-axis [-7.000000] speed [50.000000];
		sleep 230;
		move plate to y-axis [7.000000] speed [60.000000];
		sleep 230;
		isOpen = TRUE;
	}
	sleep 22;
	return (0);
}

deactivatescr()
{
	if( isOpen )
	{
		isOpen = FALSE;
		move plate to y-axis [7.000000] now;
		move door1 to y-axis [-7.000000] now;
		move door2 to y-axis [-7.000000] now;
		turn door1 to z-axis <-65.714286> now;
		turn door2 to z-axis <65.258242> now;
		sleep 220;
		move plate to y-axis [0.000000] speed [24.421585];
		sleep 389;
		move door1 to y-axis [0.000000] speed [60.000000];
		move door2 to y-axis [0.000000] speed [60.000000];
		sleep 230;
		turn door1 to z-axis <0.000000> speed <500.000000>;
		turn door2 to z-axis <0.000000> speed <500.000000>;
		sleep 130;
	}
	sleep 20;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 <= 2 )
		{
			//emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			//emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			//emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			//emit-sfx 3 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
	return (0);
}

StopMoving()
{
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	return (0);
}

Go()
{
	call-script activatescr();
	turn turret to y-axis Static_Var_2 speed <160.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.000000>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
	return (0);
}

Create()
{
	Static_Var_5 = 1;
	Static_Var_2 = 0;
	isOpen = FALSE;
	nanopt=0;
	start-script SmokeUnit();
	start-script Build();
	start-script WobbleUnit();
	//start-script BankClerck();
	return (0);
}

StartBuilding(Func_Var_1)
{
	signal SIG_BUILD;
	Static_Var_2 = Func_Var_1;
	bBuilding = 1;
	start-script Go();
	return (0);
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	set-signal-mask SIG_BUILD;
	bBuilding = 0;
	Sleep DEFAULT_BUILDER_RESTORE_DELAY;	
	start-script Stop();
	return (0);
}


QueryNanoPiece(piecenum)
{
	if (nanopt == [0])
	{
		piecenum = nanospray1;
		return (0);
	}
	if (nanopt == [1])
	{
		piecenum = nanospray2;
		return (0);
	}	
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode nano1 type SHATTER | BITMAP2;
		explode nano2 type SHATTER | BITMAP2;
		explode walls type SHATTER | BITMAP2;
		explode door1 type SHATTER | BITMAP2;
		explode door2 type SHATTER | BITMAP2;
		return (1);
	}
	explode nano1 type SHATTER | BITMAP2;
	explode nano2 type SHATTER | BITMAP2;
	explode walls type SHATTER | BITMAP2;
	explode door1 type SHATTER | BITMAP2;
	explode door2 type SHATTER | BITMAP2;
	explode b2 type SHATTER | BITMAP2;
	return (2);
}
