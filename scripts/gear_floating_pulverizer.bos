#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, stand, turret, llauncher, rlauncher, lgun1, lgun2, rgun1, rgun2, lfirept1, lfirept2, rfirept1, rfirept2, tlogo;

static-var gun_1, isOpen;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}




Create()
{
	isOpen = FALSE;
	gun_1 = [0];
	start-script SmokeUnit();
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <300.000000>;
	turn llauncher to x-axis <0.000000> speed <300.000000>;
	turn rlauncher to x-axis <0.000000> speed <300.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <400.071429>;
	turn llauncher to x-axis <0.000000> - pitch speed <400.038462>;
	turn rlauncher to x-axis <0.000000> - pitch speed <400.038462>;
	wait-for-turn turret around y-axis;
	wait-for-turn llauncher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = lfirept1;
	}
	if( gun_1 == [1] )
	{
		piecenum = lfirept2;
	}
	if( gun_1 == [2] )
	{
		piecenum = rfirept1;
	}
	if( gun_1 == [3] )
	{
		piecenum = rfirept2;
	}
	return (0);		
}

Shot1()
{
	if( gun_1 == [0])
	{
		emit-sfx 1024 from lfirept1;
		sleep 50;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1])
	{
		emit-sfx 1024 from lfirept2;
		sleep 50;
		gun_1 = [2];
		return (0);
	}
	if( gun_1 == [2])
	{
		emit-sfx 1024 from rfirept1;
		sleep 50;
		gun_1 = [3];
		return (0);
	}
	if( gun_1 == [3])
	{
		emit-sfx 1024 from rfirept2;
		sleep 50;
		gun_1 = [0];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}


SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lgun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rgun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode stand type SHATTER | BITMAP4;
		explode turret type SHATTER | BITMAP4;
		explode llauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rlauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP4;
		explode stand type SHATTER | BITMAP4;
		explode turret type SHATTER | BITMAP4;
		explode llauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rlauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP4;
	explode stand type SHATTER | BITMAP4;
	explode turret type SHATTER | BITMAP4;
	explode llauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rlauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}
