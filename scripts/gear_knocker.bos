#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lwing, rwing, lbody, rbody, center, sleeve, barrel, flare, jet, b2, jet2, jet3, c2,c3,ljp,rjp,cjp;

static-var  statechg_DesiredState, statechg_StateChanging, isFlying;

#define SIG_AIM 	2


activatescr()
{
	if( !isFlying)
	{
		// nothing to do here
		sleep 50;
		isFlying = TRUE;
	}
	sleep 66;	
}


deactivatescr()
{
	if( isFlying )
	{
		isFlying = FALSE;
		sleep 50;
		// nothing to do here
	}
	sleep 66;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = 1;
	statechg_StateChanging = 0;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = 1;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = 0;
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn sleeve to x-axis <0.000000> speed <45.005495>;
	return (0);
}

Create()
{
	isFlying = FALSE;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}


AimFromPrimary(piecenum)
{
	piecenum = center;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	if(!isFlying)
	{
		return (0);
	}
	
	while (heading < <-20> || heading > <20>) {
			sleep 100;
	}
	
	turn sleeve to x-axis <0.000000> - pitch speed <270.005495>;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move b2 to z-axis [-16.000000] speed [40.000000];
	move barrel to z-axis [-3.000000] now;
	emit-sfx 1024+0 from flare;
	emit-sfx 1024+0 from flare;
	sleep 100;
	move barrel to z-axis [0.000000] speed [10.000000];
	sleep 200;
	move b2 to z-axis [0.000000] speed [10.000000];
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	corpsetype = 3;
	explode center type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode c2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode c3 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode lwing type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode rwing type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode jet type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode jet2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode jet3 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
