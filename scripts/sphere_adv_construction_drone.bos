#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, nano, beam,sphere, sphere2, turret, hull;

static-var  statechg_DesiredState, statechg_StateChanging;

// signal definitions
#define SIG_ACTIVATION		8
#define SIG_BUILD			4

activatescr()
{
	sleep 44;
	return (0);
}

deactivatescr()
{
	sleep 44;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from turret;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from nano;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	signal SIG_ACTIVATION;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	set-signal-mask SIG_ACTIVATION;
	sleep 2500;
	start-script RequestState(1);
	return (0);
}

StartBuilding(heading, pitch)
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;

	//turn hull to y-axis heading speed <300.000000>;

	set INBUILDSTANCE to 1;
}


StopBuilding()
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;

	set INBUILDSTANCE to 0;
	
	sleep 5000;
	//turn hull to y-axis <0.000000> speed <150.000000>;
}


QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	corpsetype = 3;
	explode sphere type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode sphere2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode nano type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}
