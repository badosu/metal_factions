#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare1, flare2, turret, barrel1, barrel2, sleeve;

static-var gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	gun_1 = [0];

	start-script SmokeUnit();	
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <75.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <90.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1 == [0])
	{
		move barrel1 to z-axis [-5.000000] now;
		emit-sfx 1024 + 0 from flare1;
		sleep 150;
		move barrel1 to z-axis [0.000000] speed [7.500000];
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1])
	{
		move barrel2 to z-axis [-5.000000] now;
		emit-sfx 1024 + 0 from flare2;
		sleep 150;
		move barrel2 to z-axis [0.000000] speed [7.500000];
		gun_1 = [0];
		return (0);
	}	
}

TargetCleared(Func_Var_1)
{
	stop-spin turret around y-axis;
	stop-spin sleeve around x-axis;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == [0])
	{
		piecenum = flare1;
		return (0);
	}
	if (gun_1 == [1])
	{
		piecenum = flare2;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode sleeve type SHATTER;
		explode barrel1 type SHATTER;
		explode barrel2 type SHATTER;
		return (1);
	}
	explode base type SHATTER;
	explode sleeve type SHATTER;
	explode turret type SHATTER;
	explode barrel1 type SHATTER;
	explode barrel2 type SHATTER;
	return (2);
}
