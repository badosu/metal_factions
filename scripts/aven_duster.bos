#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 110

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>


piece  flare, base, turret,sleeve,barrel, bwheell, bwheelr, fwheell, fwheelr, bcoverl, bcoverr, fcoverl, fcoverr, b2;

static-var  restore_delay;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2

#include "wheelspeed.h"



SpinWheels(last)
{
	last = 0;
	while ( TRUE )
	{
		
		if ( last != (wheelSpeed / 8) )
		{
			spin bwheell around x-axis speed wheelSpeed; // accelerate wheelAcceleration;
			spin bwheelr around x-axis speed wheelSpeed; //accelerate wheelAcceleration;
			spin fwheell around x-axis speed wheelSpeed; //accelerate wheelAcceleration;
			spin fwheelr around x-axis speed wheelSpeed; //accelerate wheelAcceleration;
			last = wheelSpeed / 8;
		}
		sleep 100;
	}
	return (0);
}

StopWheels()
{
	stop-spin bwheell around x-axis decelerate <12.000000>;
	stop-spin bwheelr around x-axis decelerate <12.000000>;
	stop-spin fwheell around x-axis decelerate <12.000000>;
	stop-spin fwheelr around x-axis decelerate <12.000000>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare;
	restore_delay = 3000;
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	start-script WheelSpeedControl();
	start-script SpinWheels();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<90>,<90>);
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn sleeve to x-axis <0.000000> speed <80.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<80>,<80>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <80.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <80.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-4.000000] now;
	emit-sfx 1024 from flare;
	sleep 100;
	move barrel to z-axis [0.000000] speed [4.000000];
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 35 )
	{
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP4;
		explode barrel type SHATTER | BITMAP4;		
		return (1);
	}
	explode base type SHATTER;
	explode bwheell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fwheelr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bcoverl type SHATTER;
	explode bcoverr type SHATTER;
	explode fcoverl type SHATTER;
	explode fcoverr type SHATTER;
	explode turret type SHATTER | BITMAP4;
	explode barrel type SHATTER | BITMAP4;		
	
	return (2);
}
