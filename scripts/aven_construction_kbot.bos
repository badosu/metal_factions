#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR	380

piece  hips, torso, lthigh, rthigh, rleg, lleg, rfoot, lfoot, p2, launcher, nanospray, lbase, wings;

static-var  Static_Var_1, bMoving, isBuilding, isOpen, mATurnSpd1,mATurnSpd2,mATurnSpd3,mASpdFactor, mAMoveSpd1, mADelay1, legAngle1, legAngle2, legAngle3;

// Signal definitions
#define SIG_BUILD			2

Build()
{
	while(TRUE)
	{
		if( isBuilding == [1] )
		{
			emit-sfx 1024 + 0 from nanospray;
			sleep 60;
		}
		sleep 40;
	}
	return (0);
}
MotionSpeedControl(maxSpeed,currentSpeed)
{
	maxSpeed = get MAX_SPEED;
	currentSpeed = 0;
	mASpdFactor = SPEEDUP_FACTOR;

	
	while(TRUE)
	{
		currentSpeed = get CURRENT_SPEED;
		mASpdFactor = SPEEDUP_FACTOR * currentSpeed / maxSpeed;

		//call-script lua_cobDebug(mASpdFactor);
		if ( mASpdFactor < 120 )
		{
			mASpdFactor = 120;
		}
		
		
		mAMoveSpd1 = [3.000000] * mASpdFactor / 100;
		mATurnSpd1 = <315.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd2 = <200.000000> * (100 + mASpdFactor) / 200;
		mATurnSpd3 = <50.000000> * (100 + mASpdFactor) / 200;

		legAngle1 = <35.000000>;
		legAngle2 = <20.000000>;
		legAngle3 = <15.000000>;
		if ( mASpdFactor < SPEEDUP_FACTOR )
		{
			legAngle1 = legAngle1 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle2 = legAngle2 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
			legAngle3 = legAngle3 * (SPEEDUP_FACTOR + mASpdFactor) / (2*SPEEDUP_FACTOR);
		}
		mADelay1 = 50;

		if(!bMoving)
		{
			mADelay1 = 50;
		}
		if ( mASpdFactor >= 50 AND bMoving  )
		{
			mADelay1 = mADelay1 * 100 / mASpdFactor;
		}
	
		sleep 30;
	}
}

walk()
{
	var slowTurnSpd, slowTurnSpd2;

	slowTurnSpd = mATurnSpd2 / 4;
	slowTurnSpd2 = mATurnSpd2 / 6;
	
	
	// back contact point : right foot behind, left foot forward
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000>-legAngle1 speed mATurnSpd1;
		turn lleg to x-axis legAngle2 speed mATurnSpd2;
		turn lfoot to x-axis legAngle3 speed mATurnSpd1;

		turn rthigh to x-axis legAngle2 speed mATurnSpd2;
		turn rleg to x-axis legAngle3 speed mATurnSpd2;
		turn rfoot to x-axis <0.000000>-legAngle2 speed mATurnSpd1;

		move hips to y-axis [-0.500000] speed mAMoveSpd1;
		move hips to z-axis [1.000000] speed mAMoveSpd1;
		turn hips to x-axis <4.000000> speed slowTurnSpd2;

		if(!isBuilding)
		{
			// turn torso left, right arm forward
			turn torso to y-axis <10.000000> speed slowTurnSpd2;
		}
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// passing pose 2 : right foot raising, left foot on the ground
	if( bMoving )
	{
		turn lthigh to x-axis <0.000000> speed mATurnSpd2;
		turn lleg to x-axis <0.000000> speed mATurnSpd2;
		turn lfoot to x-axis <10.000000> speed mATurnSpd3;

		turn rthigh to x-axis <60.000000> speed mATurnSpd1;
		turn rleg to x-axis <-60.000000> speed mATurnSpd1;
		turn rfoot to x-axis <10.000000> speed mATurnSpd1;

		if(!isBuilding)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
		}

		sleep mADelay1;
		move hips to y-axis [0.000000] speed mAMoveSpd1;
		move hips to z-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;

	}
	
	// forward contact point : right foot forward, left foot behind
	if( bMoving )
	{
		turn lthigh to x-axis legAngle2 speed mATurnSpd2;
		turn lleg to x-axis legAngle3 speed mATurnSpd2;
		turn lfoot to x-axis <0>-legAngle2 speed mATurnSpd1;

		turn rthigh to x-axis <0>-legAngle1 speed mATurnSpd1;
		turn rleg to x-axis legAngle2 speed mATurnSpd2;
		turn rfoot to x-axis legAngle3 speed mATurnSpd1;
		
		move hips to y-axis [-0.500000] speed mAMoveSpd1;
		move hips to z-axis [1.000000] speed mAMoveSpd1;
		turn hips to x-axis <4.000000> speed slowTurnSpd2;
		
		if(!isBuilding)
		{
			// turn torso right, left arm forward
			turn torso to y-axis <-10.000000> speed slowTurnSpd2;
		}

		sleep mADelay1;
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}

	// passing pose 1 : right foot on ground, left foot raising
	if( bMoving )
	{
		turn lthigh to x-axis <60.000000> speed mATurnSpd1;
		turn lleg to x-axis <-60.000000> speed mATurnSpd1;
		turn lfoot to x-axis <10.000000> speed mATurnSpd1;
		
		turn rthigh to x-axis <0.000000> speed mATurnSpd2;
		turn rleg to x-axis <0.000000> speed mATurnSpd2;
		turn rfoot to x-axis <10.000000> speed mATurnSpd3;

		
		if(!isBuilding)
		{
			// restore position
			turn torso to y-axis <0.000000> speed slowTurnSpd2;
		}
		
		sleep mADelay1;
		move hips to y-axis [0.000000] speed mAMoveSpd1;
		move hips to z-axis [0.000000] speed mAMoveSpd1;
		turn hips to x-axis <0.000000> speed slowTurnSpd2;
		
		wait-for-turn lthigh around x-axis;
		wait-for-turn rthigh around x-axis;
		wait-for-turn lleg around x-axis;
		wait-for-turn rleg around x-axis;
	}
	
	return;
}



stand()
{

	return (0);
}

open()
{
	if( !isOpen )
	{
		sleep 175;
		isOpen = TRUE;
	}
	
	sleep 30;
	return (0);
}

close()
{
	
	if( isOpen )
	{
		isOpen = FALSE;
		sleep 134;
	}
	sleep 30;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MotionControl(moving, justMoved)
{
	while( TRUE )
	{
		moving = bMoving;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justMoved )
			{
				move hips to y-axis [0.000000] speed [25.000000];
				turn hips to x-axis <0.000000> speed <20.000000>;
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn rfoot to x-axis <0.000000> speed <200.000000>;
				turn lfoot to x-axis <0.000000> speed <200.000000>;
			
				if( !isBuilding )
				{
					turn torso to y-axis <0.000000> speed <200.000000>;
				}
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}
aimNanoTurret()
{
	turn torso to y-axis Static_Var_1 speed <480.038462>;
	wait-for-turn torso around y-axis;
	return (0);
}
Go()
{
	isBuilding = [1];
	call-script open();
	call-script aimNanoTurret();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn torso to y-axis <0.000000> speed <480.000000>;
	wait-for-turn torso around y-axis;
	call-script close();
	isBuilding = [0];
	return (0);
}



Create()
{
	bMoving = FALSE;
	Static_Var_1 = 0;
	isBuilding = [0];
	isOpen = FALSE;
	start-script MotionSpeedControl();
	start-script MotionControl();
	start-script SmokeUnit();
	start-script Build();
	return (0);
}

StartBuilding(Func_Var_1)
{
	signal SIG_BUILD;
	Static_Var_1 = Func_Var_1;
	start-script Go();
	isBuilding = [1];
	return (0);
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	set-signal-mask SIG_BUILD;
	isBuilding = [0];
	sleep DEFAULT_BUILDER_RESTORE_DELAY;
	start-script Stop();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = nanospray;
	return (0);
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
