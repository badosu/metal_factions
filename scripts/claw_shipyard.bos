#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, buildpt, left, leftbottom, l1, right, rightbottom, r1, nanopt1, nanopt2, nanopt3, nanopt4, a1;

static-var  spray, statechg_DesiredState, statechg_StateChanging, bBuilding;

// Signal definitions
#define SIG_ACTIVATE			2


Standby()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 100;
	}
	//while( TRUE )
	//{
		//emit-sfx 1024 + 1 from base;
		//sleep 700;
	//}
	return (0);
}

Build()
{
	while (TRUE)
	{
		if( bBuilding == 1 )
		{
			emit-sfx 1024 + 0 from nanopt1;
			emit-sfx 1024 + 0 from nanopt2;
			emit-sfx 1024 + 0 from nanopt3;
			emit-sfx 1024 + 0 from nanopt4;
		}
		sleep 100;	
	}
	return (0);
}

activatescr()
{

	sleep 37;
	return (0);
}

deactivatescr()
{

	sleep 37;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	bBuilding = 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	bBuilding = 0;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	spray = [0];
	call-script InitState();
	start-script SmokeUnit();
	start-script Build();
	start-script Standby();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( spray == [0] )
	{
		piecenum = nanopt1;
		spray = [1];
		return (0);
	}
	if( spray == [1] )
	{
		piecenum = nanopt2;
		spray = [2];
		return (0);
	}
	if( spray == [2] )
	{
		piecenum = nanopt3;
		spray = [3];
		return (0);
	}
	if( spray == [3] )
	{
		piecenum = nanopt4;
		spray = [0];
		return (0);
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = buildpt;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode l1 type SHATTER;
		explode r1 type SHATTER;
		return (1);
	}
	explode left type SHATTER;
	explode leftbottom type SHATTER;
	explode right type SHATTER;
	explode rightbottom type SHATTER;
	explode a1 type SHATTER;
	explode l1 type SHATTER;
	explode r1 type SHATTER;

	return (2);
}