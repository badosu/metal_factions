#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 170

piece  base, turret, barrel1, barrel2, flare1, flare2, leg1, leg2,
       leg3, leg4, leg5, leg6, glowsource, shinesource;

static-var  Static_Var_1, restore_delay, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, justMoved;


ON()
{
	if( Static_Var_4 == 1 )
	{
		emit-sfx 1024 + 0 from shinesource;
		sleep 1;
	}
	if( Static_Var_4 == 2 )
	{
		emit-sfx 1024 + 0 from shinesource;
		emit-sfx 1024 + 1 from shinesource;
		sleep 1;
	}
	if( Static_Var_4 == 3 )
	{
		emit-sfx 1024 + 0 from shinesource;
		emit-sfx 1024 + 1 from shinesource;
		emit-sfx 1024 + 2 from shinesource;
		sleep 1;
	}
	if( Static_Var_4 == 4 )
	{
		emit-sfx 1024 + 0 from shinesource;
		emit-sfx 1024 + 1 from shinesource;
		emit-sfx 1024 + 2 from shinesource;
		emit-sfx 1024 + 0 from shinesource;
		emit-sfx 1024 + 1 from shinesource;
		emit-sfx 1024 + 2 from shinesource;
		sleep 1;
	}
	start-script ON();
	return;
}

Overload()
{
	Static_Var_6 = 1;
	set UNKNOWN_UNIT_VALUE(75) to Static_Var_5 * 0;
	if( Static_Var_4 == 0 )
	{
		sleep 1;
		Static_Var_4 = 1;
		sleep 333;
		if( Static_Var_4 == 1 )
		{
			Static_Var_4 = 2;
			sleep 333;
			if( Static_Var_4 == 2 )
			{
				Static_Var_4 = 3;
				sleep 333;
				if( Static_Var_4 == 3 )
				{
					Static_Var_4 = 4;
					sleep 100;
					Static_Var_4 = 5;
					emit-sfx 4096 + 2 from shinesource;
					emit-sfx 4096 + 1 from shinesource;
					Static_Var_6 = 0;
					set UNKNOWN_UNIT_VALUE(75) to Static_Var_5;
					sleep 10000;
					Static_Var_4 = 0;
				}
			}
		}
	}
	if( Static_Var_4 > 0 AND Static_Var_4 < 4 )
	{
		Static_Var_4 = 0;
		Static_Var_6 = 0;
		set UNKNOWN_UNIT_VALUE(75) to Static_Var_5;
		sleep 100;
	}
	return;
}

walk2()
{
	while( Static_Var_1 )
	{
		if( Static_Var_1 )
		{
			turn leg1 to y-axis <43.791209> now;
			turn leg1 to y-axis <0.000000> speed <219.000000> * SPEEDUP_FACTOR / 100;
			turn leg1 to z-axis <0.593407> now;
			turn leg1 to z-axis <0.000000> speed <3.000000> * SPEEDUP_FACTOR / 100;
			turn leg2 to z-axis <0.000000> now;
			turn leg2 to z-axis <31.000000> speed <155.093407> * SPEEDUP_FACTOR / 100;
			turn leg3 to y-axis <34.692308> now;
			turn leg3 to y-axis <34.093407> speed <3.000000> * SPEEDUP_FACTOR / 100;
			turn leg3 to z-axis <31.593407> now;
			turn leg3 to z-axis <0.593407> speed <155.093407> * SPEEDUP_FACTOR / 100;
			turn leg4 to y-axis <-40.093407> now;
			turn leg4 to y-axis <-40.093407> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn leg4 to z-axis <-31.000000> now;
			turn leg4 to z-axis <-0.593407> speed <152.093407> * SPEEDUP_FACTOR / 100;
			turn leg5 to y-axis <-37.093407> now;
			turn leg5 to y-axis <0.000000> speed <185.500000> * SPEEDUP_FACTOR / 100;
			turn leg5 to z-axis <0.000000> now;
			turn leg5 to z-axis <0.000000> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn leg6 to y-axis <0.000000> now;
			turn leg6 to y-axis <-30.390110> speed <152.093407> * SPEEDUP_FACTOR / 100;
			turn leg6 to z-axis <-45.000000> now;
			sleep 200 * 100 / SPEEDUP_FACTOR;
		}
		if( Static_Var_1 )
		{
			turn leg1 to z-axis <31.593407> speed <158.093407> * SPEEDUP_FACTOR / 100;
			turn leg2 to y-axis <34.692308> speed <173.390110> * SPEEDUP_FACTOR / 100;
			turn leg2 to z-axis <31.000000> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn leg3 to y-axis <0.000000> speed <170.291209> * SPEEDUP_FACTOR / 100;
			turn leg3 to z-axis <0.000000> speed <3.000000> * SPEEDUP_FACTOR / 100;
			turn leg4 to y-axis <0.000000> speed <200.692308> * SPEEDUP_FACTOR / 100;
			turn leg5 to z-axis <-31.000000> speed <155.093407> * SPEEDUP_FACTOR / 100;
			turn leg6 to z-axis <2.390110> speed <237.192308> * SPEEDUP_FACTOR / 100;
			sleep 200 * 100 / SPEEDUP_FACTOR;
		}
		if( Static_Var_1 )
		{
			turn leg1 to y-axis <56.000000> speed <279.791209> * SPEEDUP_FACTOR / 100;
			turn leg1 to z-axis <31.000000> speed <3.000000> * SPEEDUP_FACTOR / 100;
			turn leg2 to y-axis <34.692308> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn leg2 to z-axis <0.593407> speed <152.093407> * SPEEDUP_FACTOR / 100;
			turn leg3 to z-axis <31.593407> speed <158.093407> * SPEEDUP_FACTOR / 100;
			turn leg4 to y-axis <-0.593407> speed <3.000000> * SPEEDUP_FACTOR / 100;
			turn leg4 to z-axis <-31.000000> speed <152.093407> * SPEEDUP_FACTOR / 100;
			turn leg5 to y-axis <-31.593407> speed <158.093407> * SPEEDUP_FACTOR / 100;
			turn leg5 to z-axis <-31.000000> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn leg6 to y-axis <3.000000> speed <167.291209> * SPEEDUP_FACTOR / 100;
			sleep 200 * 100 / SPEEDUP_FACTOR;
		}
		turn leg1 to y-axis <43.791209> speed <60.791209> * SPEEDUP_FACTOR / 100;
		turn leg1 to z-axis <0.593407> speed <152.093407> * SPEEDUP_FACTOR / 100;
		turn leg2 to y-axis <0.000000> speed <173.390110> * SPEEDUP_FACTOR / 100;
		turn leg2 to z-axis <0.000000> speed <3.000000> * SPEEDUP_FACTOR / 100;
		turn leg3 to y-axis <34.692308> speed <173.390110> * SPEEDUP_FACTOR / 100;
		turn leg3 to z-axis <31.593407> speed <0.000000> * SPEEDUP_FACTOR / 100;
		turn leg4 to y-axis <-40.093407> speed <197.692308> * SPEEDUP_FACTOR / 100;
		turn leg4 to z-axis <-31.000000> speed <0.000000> * SPEEDUP_FACTOR / 100;
		turn leg5 to y-axis <-37.093407> speed <27.390110> * SPEEDUP_FACTOR / 100;
		turn leg5 to z-axis <0.000000> speed <155.093407> * SPEEDUP_FACTOR / 100;
		turn leg6 to y-axis <0.000000> speed <15.192308> * SPEEDUP_FACTOR / 100;
		turn leg6 to z-axis <-45.000000> speed <237.192308> * SPEEDUP_FACTOR / 100;
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	return;
}

stand()
{
	turn leg1 to z-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg1 to y-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg1 to x-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	
	turn leg2 to z-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg2 to y-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg2 to x-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	
	turn leg3 to z-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg3 to y-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg3 to x-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	
	turn leg4 to z-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg4 to y-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg4 to x-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	
	turn leg5 to z-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg5 to y-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg5 to x-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	
	turn leg6 to z-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg6 to y-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg6 to x-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	
	return (0);
}

SmokeUnit(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		Func_Var_1 = get HEALTH;
		if( Func_Var_1 < 66 )
		{
			Func_Var_3 = 256 | 2;
			if( Rand( 1, 66 ) < Func_Var_1 )
			{
				Func_Var_3 = 256 | 1;
			}
			emit-sfx Func_Var_3 from base;
		}
		Func_Var_2 = Func_Var_1 * 50;
		if( Func_Var_2 < 200 )
		{
			Func_Var_2 = 200;
		}
		sleep Func_Var_2;
	}
	return;
}

MotionControl()
{
	var Func_Var_1;
	while( TRUE )
	{
		Func_Var_1 = Static_Var_1;
		if( Func_Var_1 )
		{
			call-script walk2();
		}
		if (justMoved)
		{
			call-script stand();
			justMoved = FALSE;
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
	return;
}

Create()
{
	Static_Var_5 = get UNKNOWN_UNIT_VALUE(75);
	justMoved = FALSE;
	hide flare1;
	hide flare2;
	start-script ON();
	Static_Var_1 = 0;
	Static_Var_3 = 0;
	restore_delay = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
	return;
}

StartMoving()
{
	Static_Var_1 = 1;
	return;
}

StopMoving()
{
	Static_Var_1 = 0;
	justMoved = TRUE;
	return;
}

SweetSpot(piecenum)
{
	piecenum = base;
	return;
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
	return;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn turret to x-axis <0.000000> speed <90.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	return;
}

AimPrimary(Func_Var_1, Func_Var_2)
{
	while( Static_Var_6 == 1 )
	{
		sleep 100;
	}
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis Func_Var_1 speed <225.000000>;
	turn turret to x-axis <0.000000> - Func_Var_2 speed <90.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Static_Var_3 == 0 )
	{
		move barrel1 to z-axis [-3.250000] now;
		emit-sfx 1024+0 from flare1;
		sleep 100;
		move barrel1 to z-axis [0.000000] speed [7.500000];
		Static_Var_3 = 1;
		return (0);
	}
	if( Static_Var_3 == 1 )
	{
		move barrel2 to z-axis [-3.250000] now;
		emit-sfx 1024+0 from flare2;
		sleep 100;
		move barrel2 to z-axis [0.000000] speed [7.500000];
		Static_Var_3 = 0;
		return (0);
	}
}

AimFromPrimary(Func_Var_1)
{
	Func_Var_1 = 1;
	return;
}

QueryPrimary(Func_Var_1)
{
	if( Static_Var_3 == 0 )
	{
		Func_Var_1 = 4;
		return (0);
	}
	if( Static_Var_3 == 1 )
	{
		Func_Var_1 = 5;
		return (0);
	}
}

Killed(Func_Var_1, Func_Var_2)
{
	hide flare1;
	hide flare2;
	if( Func_Var_1 <= 25 )
	{
		Func_Var_2 = 1;
		explode barrel1 type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode barrel2 type BITMAPONLY | EXPTYPE_MEDIUMEXPLOSION;
		explode base type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode flare1 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode flare2 type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
		explode leg1 type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode leg2 type BITMAPONLY | EXPTYPE_MEDIUMEXPLOSION;
		explode leg3 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode leg4 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode leg5 type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
		explode leg6 type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode turret type BITMAPONLY | EXPTYPE_MEDIUMEXPLOSION;
		return (0);
	}
	if( Func_Var_1 <= 50 )
	{
		Func_Var_2 = 2;
		explode barrel1 type FALL | EXPTYPE_SMALLEXPLOSION;
		explode barrel2 type FALL | EXPTYPE_MEDIUMEXPLOSION;
		explode base type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode flare1 type FALL | EXPTYPE_XLARGEEXPLOSION;
		explode flare2 type FALL | EXPTYPE_BLOODEXPLOSION;
		explode leg1 type FALL | EXPTYPE_SMALLEXPLOSION;
		explode leg2 type FALL | EXPTYPE_MEDIUMEXPLOSION;
		explode leg3 type FALL | EXPTYPE_LARGEEXPLOSION;
		explode leg4 type FALL | EXPTYPE_XLARGEEXPLOSION;
		explode leg5 type FALL | EXPTYPE_BLOODEXPLOSION;
		explode leg6 type FALL | EXPTYPE_SMALLEXPLOSION;
		explode turret type 1 | EXPTYPE_MEDIUMEXPLOSION;
		return (0);
	}
	if( Func_Var_1 <= 99 )
	{
		Func_Var_2 = 3;
		explode barrel1 type FALL | 8 | 16 | 2 | EXPTYPE_SMALLEXPLOSION;
		explode barrel2 type FALL | 8 | 16 | 2 | EXPTYPE_MEDIUMEXPLOSION;
		explode base type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode flare1 type FALL | 8 | 16 | 2 | EXPTYPE_XLARGEEXPLOSION;
		explode flare2 type FALL | 8 | 16 | 2 | EXPTYPE_BLOODEXPLOSION;
		explode leg1 type FALL | 8 | 16 | 2 | EXPTYPE_SMALLEXPLOSION;
		explode leg2 type FALL | 8 | 16 | 2 | EXPTYPE_MEDIUMEXPLOSION;
		explode leg3 type FALL | 8 | 16 | 2 | EXPTYPE_LARGEEXPLOSION;
		explode leg4 type FALL | 8 | 16 | 2 | EXPTYPE_XLARGEEXPLOSION;
		explode leg5 type FALL | 8 | 16 | 2 | EXPTYPE_BLOODEXPLOSION;
		explode leg6 type FALL | 8 | 16 | 2 | EXPTYPE_SMALLEXPLOSION;
		explode turret type 1 | EXPTYPE_MEDIUMEXPLOSION;
		return (0);
	}
	Func_Var_2 = 3;
	explode barrel1 type FALL | 8 | 16 | 2 | EXPTYPE_SMALLEXPLOSION;
	explode barrel2 type FALL | 8 | 16 | 2 | EXPTYPE_MEDIUMEXPLOSION;
	explode base type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
	explode flare1 type FALL | 8 | 16 | 2 | EXPTYPE_XLARGEEXPLOSION;
	explode flare2 type FALL | 8 | 16 | 2 | EXPTYPE_BLOODEXPLOSION;
	explode leg1 type FALL | 8 | 16 | 2 | EXPTYPE_SMALLEXPLOSION;
	explode leg2 type FALL | 8 | 16 | 2 | EXPTYPE_MEDIUMEXPLOSION;
	explode leg3 type FALL | 8 | 16 | 2 | EXPTYPE_LARGEEXPLOSION;
	explode leg4 type FALL | 8 | 16 | 2 | EXPTYPE_XLARGEEXPLOSION;
	explode leg5 type FALL | 8 | 16 | 2 | EXPTYPE_BLOODEXPLOSION;
	explode leg6 type FALL | 8 | 16 | 2 | EXPTYPE_SMALLEXPLOSION;
	explode turret type 1 | 2 | EXPTYPE_MEDIUMEXPLOSION;
	return;
}
