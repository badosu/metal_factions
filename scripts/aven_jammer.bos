#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 120

piece  base, bwheell, bwheelr, fwheell, fwheelr, bcoverl, bcoverr, fcoverl, fcoverr, b2, jammer, fork, wings;

// Signal definitions
#define SIG_ACTIVATE			2

#include "wheelspeed.h"

SpinWheels(last)
{
	last = 0;
	while ( TRUE )
	{
		
		if ( last != (wheelSpeed / 8) )
		{
			spin bwheell around x-axis speed wheelSpeed; // accelerate wheelAcceleration;
			spin bwheelr around x-axis speed wheelSpeed; //accelerate wheelAcceleration;
			spin fwheell around x-axis speed wheelSpeed; //accelerate wheelAcceleration;
			spin fwheelr around x-axis speed wheelSpeed; //accelerate wheelAcceleration;
			last = wheelSpeed / 8;
		}
		sleep 100;
	}
	return (0);
}

StopWheels()
{
	stop-spin bwheell around x-axis decelerate <12.000000>;
	stop-spin bwheelr around x-axis decelerate <12.000000>;
	stop-spin fwheell around x-axis decelerate <12.000000>;
	stop-spin fwheelr around x-axis decelerate <12.000000>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.021978>;
	turn base to x-axis Func_Var_1 speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

Create()
{
	start-script SmokeUnit();
	start-script WheelSpeedControl();
	start-script SpinWheels();
}

Activate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	spin jammer around z-axis speed <100.021978>;
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	turn jammer to z-axis <0.000000> speed <100.021978>;
	wait-for-turn jammer around x-axis;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode jammer type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode fork type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode wings type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode jammer type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode fork type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode wings type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode b2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode jammer type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode fork type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode wings type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode b2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode jammer type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode fork type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode wings type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode b2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;	
}
