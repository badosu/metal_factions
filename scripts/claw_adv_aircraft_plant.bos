#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2,beam3,beam4, platform1, platform2, platform3,platform4,
       nano2, nano1, spike1, spike2, a1, a2, logo1, logo2;

static-var  nanoPt, bBuilding,statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


Build()
{
	while (TRUE)
	{
		if( bBuilding == TRUE )
		{
			emit-sfx 1024 + 0 from beam1;
			emit-sfx 1024 + 0 from beam2;
			emit-sfx 1024 + 0 from beam3;
			emit-sfx 1024 + 0 from beam4;			
			sleep 80;
		}
		sleep 40;
	}
	return (0);
}

activatescr()
{

	sleep 20;
}

deactivatescr()
{

	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	bBuilding = FALSE;
	nanoPt = [0];
	call-script InitState();
	start-script SmokeUnit();
	start-script Build();
}

QueryNanoPiece(piecenum)
{
	if( nanoPt == [0] )
	{
		piecenum = beam1;
		nanoPt = [1];
		return (0);
	}
	if( nanoPt == [1] )
	{
		piecenum = beam2;
		nanoPt = [2];
		return (0);
	}
	if( nanoPt == [2] )
	{
		piecenum = beam3;
		nanoPt = [3];
		return (0);
	}
	if( nanoPt == [3] )
	{
		piecenum = beam4;
		nanoPt = [0];
		return (0);
	}		

}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	bBuilding = TRUE;
}

StopBuilding()
{
	bBuilding = FALSE;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode nano1 type SHATTER;
		explode nano2 type SHATTER;
		explode platform1 type SHATTER;
		explode platform2 type SHATTER;
		return (1);
	}

	explode a1 type SHATTER;
	explode a2 type SHATTER;
	explode logo1 type SHATTER;
	explode logo2 type SHATTER;
	explode nano1 type SHATTER;
	explode nano2 type SHATTER;
	explode platform1 type SHATTER;
	explode platform2 type SHATTER;
	explode platform3 type SHATTER;
	explode platform4 type SHATTER;
	return (2);
}
