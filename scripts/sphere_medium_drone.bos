#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, h1,h2,h3, wingsup, wing1, wing2, shieldpt, wsup, barrel1, flare1,jp1;

static-var  statechg_DesiredState, statechg_StateChanging, isFlying;
#define SIG_AIM		2



activatescr()
{
	if( !isFlying)
	{
		// nothing to do here
		sleep 50;
		isFlying = TRUE;
	}
	sleep 30;
}


deactivatescr()
{
	if( isFlying )
	{
		isFlying = FALSE;
		sleep 50;
		// nothing to do here
	}
	sleep 24;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	isFlying = FALSE;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

AimPrimary()
{
	if(!isFlying)
	{
		return (0);
	}
	return (1);
}

FirePrimary()
{
		emit-sfx 1024+0 from flare1;			
		return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = wsup;
	return (0);
}


QuerySecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimSecondary(heading, pitch)
{
	return (1);
}
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode h1 type BITMAPONLY | BITMAP2;
		explode h2 type BITMAPONLY | BITMAP3;
		explode wingsup type BITMAPONLY | BITMAP1;
		explode wing1 type SHATTER;
		explode wing2 type SHATTER;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode h1 type FALL | BITMAP2;
		explode h2 type FALL | BITMAP3;
		explode h3 type FALL | BITMAP4;
		explode wingsup type FALL | BITMAP5;
		explode wing1 type SHATTER;
		explode wing2 type SHATTER;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode h1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode h2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode h3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wingsup type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode wing1 type SHATTER;
		explode wing2 type SHATTER;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode h1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode h2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode h3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wingsup type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode wing1 type SHATTER;
	explode wing2 type SHATTER;
	return (0);
}
