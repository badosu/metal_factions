//
// [] = 65536, <> = 182.044449
//

// Comment this out to disable the wobbling turret
#define WOBBLE

#define TAK
#include "constants.h"

piece		base, body, lift, turret, cradle, rear, nano, panel_t, panel_r, panel_l, panel_b, 
			firepoint, door1, door2, tracks1, tracks2, tracks3, tracks4, wheels1, wheels2,
			wheels3, wheels4,	wheels5, wheels6, wheels7;

static-var	moving, once, animCount;

// Signal definitions
#define SIG_BUILD						1
#define ANIM_SPEED						50
#define RESTORE_DELAY					3000

#define TURN_SPEED1						<160>
#define TURN_SPEED2						<240>
#define MOVE_SPEED1						[10]
#define MOVE_SPEED2						[20]
#define SLEEP_TIME1						100
#define SLEEP_TIME2						250

#define WHEEL_TURN_SPEED1				<480>
#define WHEEL_TURN_SPEED1_ACCELERATION	<75>
#define WHEEL_TURN_SPEED1_DECELERATION	<200>

#define DOOR_ANGLE_Z					<160>
#define PANEL_ANGLE_MIN					<60>
#define PANEL_ANGLE_MAX					<90>
#define TURRET_Y						[5.5]
#define LIFT_Y							[12.5]
#define REAR_Z							[-3]
#define NANO_Z							[3.5]


DamageControl()
{
	var health;
	while (TRUE)
	{
		health = get HEALTH;
		
		// Restore damaged parts
/*		if (health > 25)
		{
			if (health > 50)
			{
				
			}

		}*/
		
		// Damage parts, smoke emits etc.
		if (health < 50)
		{
			emit-sfx SFXTYPE_WHITESMOKE from body;
			if (health < 25)
			{	
				emit-sfx SFXTYPE_BLACKSMOKE from turret;
			}
		}
		sleep 1000;
	}
}
AnimationControl()
{
	var current_tracks;
	current_tracks = 0;
	
	while (TRUE)
	{
		if (moving OR once)
		{
			if (current_tracks == 0)
			{
				show tracks1;
				hide tracks4;
				++current_tracks;
			}
			else if (current_tracks == 1)
				{
				show tracks2;
				hide tracks1;
				++current_tracks;
			}
			else if (current_tracks == 2)
			{
				show tracks3;
				hide tracks2;
				++current_tracks;
			}
			else if (current_tracks == 3)
			{
				show tracks4;
				hide tracks3;
				current_tracks=0;
				if (once) --once;
			}
		}
		++animCount;
		sleep ANIM_SPEED;
	}
}

StartMoving()
{
	moving = TRUE;
	animCount = 0;
	
	spin wheels1 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin wheels2 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin wheels3 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin wheels4 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin wheels5 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin wheels6 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
	spin wheels7 around x-axis speed WHEEL_TURN_SPEED1 accelerate WHEEL_TURN_SPEED1_ACCELERATION;
}

StopMoving()
{
	moving = FALSE;
	
	// I don't like insta braking. It's not perfect but works for most cases.
	// Probably looks goofy when the unit is turtling around, i.e. does not become faster as time increases..
	once = animCount*ANIM_SPEED/1000;

	stop-spin wheels1 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin wheels2 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin wheels3 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin wheels4 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin wheels5 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin wheels6 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
	stop-spin wheels7 around x-axis decelerate WHEEL_TURN_SPEED1_DECELERATION;
}

StartBuilding(heading, pitch)
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;
	
	turn door1 to z-axis 0-DOOR_ANGLE_Z speed TURN_SPEED2;
	turn door2 to z-axis DOOR_ANGLE_Z speed TURN_SPEED2;
	sleep SLEEP_TIME2;
	
	move lift to y-axis LIFT_Y speed MOVE_SPEED2;
	move turret to y-axis TURRET_Y speed MOVE_SPEED2;
	wait-for-move lift along y-axis;
	
	move nano to z-axis NANO_Z speed MOVE_SPEED2;
	move rear to z-axis REAR_Z speed MOVE_SPEED2;
	turn panel_t to x-axis 0-PANEL_ANGLE_MIN speed TURN_SPEED2;
	turn panel_b to x-axis PANEL_ANGLE_MIN speed TURN_SPEED2;
	turn panel_l to y-axis PANEL_ANGLE_MIN speed TURN_SPEED2;
	turn panel_r to y-axis 0-PANEL_ANGLE_MIN speed TURN_SPEED2;
	turn turret to y-axis heading speed TURN_SPEED2;
	turn cradle to x-axis 0-pitch speed TURN_SPEED2;
	wait-for-turn turret around y-axis;
	wait-for-turn cradle around x-axis;

	set INBUILDSTANCE to 1;
	
	var rand_turret_y, rand_panel_angle;
#ifdef WOBBLE
	while (TRUE) {
		if (rand(1,100) > 66) {
			rand_turret_y = rand(0,2)*[1];
			rand_panel_angle = rand(0, 1);
			if (rand_panel_angle) rand_panel_angle = PANEL_ANGLE_MAX;
			else rand_panel_angle = PANEL_ANGLE_MIN;
			
			move turret to y-axis (TURRET_Y - rand_turret_y) speed MOVE_SPEED2;

			turn panel_t to x-axis 0-rand_panel_angle speed TURN_SPEED1;
			turn panel_b to x-axis rand_panel_angle speed TURN_SPEED1;
			turn panel_l to y-axis rand_panel_angle speed TURN_SPEED1;
			turn panel_r to y-axis 0-rand_panel_angle speed TURN_SPEED1;
		}
		sleep 250;
	}
#endif
}

StopBuilding()
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;

	set INBUILDSTANCE to 0;
	Sleep DEFAULT_BUILDER_RESTORE_DELAY;		//  give a few seconds before closing
	move nano to z-axis 0 speed MOVE_SPEED1;
	move rear to z-axis 0 speed MOVE_SPEED1;
	turn panel_t to x-axis 0 speed TURN_SPEED1;
	turn panel_b to x-axis 0 speed TURN_SPEED1;
	turn panel_l to y-axis 0 speed TURN_SPEED1;
	turn panel_r to y-axis 0 speed TURN_SPEED1;
	turn turret to y-axis 0 speed TURN_SPEED1;
	turn cradle to x-axis 0 speed TURN_SPEED1;
	wait-for-turn turret around y-axis;
	wait-for-turn cradle around x-axis;
	
	move lift to y-axis 0 speed MOVE_SPEED1;
	move turret to y-axis 0 speed MOVE_SPEED1;
	sleep SLEEP_TIME2;

	turn door1 to z-axis 0 speed TURN_SPEED1;
	turn door2 to z-axis 0 speed TURN_SPEED1;
}

QueryNanoPiece(piecenum)
{
	piecenum = firepoint;
}

Killed(severity, corpsetype)
{
	if(severity >= 0 AND severity < 25)
	{
		corpsetype = 1;
		explode nano type BITMAPONLY | BITMAP;
		explode cradle type BITMAPONLY | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		explode turret type BITMAPONLY | BITMAP;
	}
	else if(severity >= 25 AND severity < 50)
	{
		corpsetype = 2;
		explode nano type FALL | BITMAP;
		explode cradle type FALL | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		explode turret type SHATTER | BITMAP;
	}
	else if(severity >= 50 AND severity < 100)
	{
		corpsetype = 3;
		explode nano type SHATTER | BITMAP;
		explode rear type SHATTER | BITMAP;
		explode cradle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode panel_t type FALL | BITMAP;
		explode panel_b type FALL | BITMAP;
		explode panel_l type FALL | BITMAP;
		explode panel_r type FALL | BITMAP;
		explode body type BITMAPONLY | BITMAP;
		explode turret type SHATTER | BITMAP;
	}
	// D-Gunned/Self-D
	else if(severity >= 100)
	{
		corpsetype = 3;
		explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode rear type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode cradle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
		explode panel_t type FALL | BITMAP;
		explode panel_b type FALL | BITMAP;
		explode panel_l type FALL | BITMAP;
		explode panel_r type FALL | BITMAP;
		explode body type SHATTER | BITMAP;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP;
	}
}
Create()
{
	moving = FALSE;
	
	hide tracks1;
	hide tracks2;
	hide tracks3;

	while (get BUILD_PERCENT_LEFT)
		sleep 250;
	
	start-script AnimationControl();
	start-script DamageControl();
}