#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, turret, stand, gun, beam, door1, door2,
       bec, side1, side2, prop, wake1, wake2, wake3;

static-var  Static_Var_1, isOpen;

// Signal definitions
#define SIG_MOVE			2
#define SIG_BUILD			4

activatescr()
{
	if( !isOpen )
	{
		turn door1 to z-axis <-90.021978> speed <75.000000>;
		turn door2 to z-axis <90.021978> speed <75.000000>;
		sleep 200;
		move stand to y-axis [10.000000] speed [7.500000];
		sleep 200;
		isOpen = TRUE;
	}
	sleep 30;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( isOpen )
	{
		isOpen = FALSE;
		move stand to y-axis [0.000000] speed [17.500000];
		sleep 200;
		turn door1 to z-axis <0.000000> speed <110.000000>;
		turn door2 to z-axis <0.000000> speed <110.000000>;
		sleep 200;
	}
	sleep 30;
	return (0);
}

Go()
{
	call-script activatescr();
	turn gun to y-axis Static_Var_1 speed <150.000000>;
	wait-for-turn gun around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn gun to y-axis <0.000000> speed <150.000000>;
	wait-for-turn gun around y-axis;
	call-script deactivatescr();
	return (0);
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 259 from wake1;
		emit-sfx 259 from wake2;
		emit-sfx 259 from wake3;
		sleep 200;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

Create()
{
	Static_Var_1 = 0;
	isOpen = FALSE;
	return (0);
}


StartBuilding(Func_Var_1)
{
	signal SIG_BUILD;
	Static_Var_1 = Func_Var_1;
	start-script Go();
	return (0);
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	set-signal-mask SIG_BUILD;
	Sleep DEFAULT_BUILDER_RESTORE_DELAY;
	start-script Stop();
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = hull;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode hull type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode bec type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode hull type SHATTER | BITMAP4;
		explode door1 type SHATTER | BITMAP4;
		explode door2 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode hull type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hull type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}
