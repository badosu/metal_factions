#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2,floatbase, fb2,box1,box2,box3,f1,f2,f3,mis1,mis2,mis3;

static-var  gun_1, isFloating;


// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



Create()
{
	hide floatbase;
	hide fb2;
	isFloating = FALSE;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < [0])
	{
		isFloating = TRUE;
		show floatbase;
		show fb2;
	}
	
	gun_1=0;
	start-script SmokeUnit();
}



AimPrimary(heading, pitch)
{
	return (1);
}

Shot1()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 + 0 from f1;
		move mis1 to y-axis [-4] now;
		sleep 10;
		gun_1 = 1;
		sleep 7000;
		move mis1 to y-axis [0] speed [6];
		return (0);
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 + 0 from f2;
		move mis2 to y-axis [-4] now;
		sleep 10;
		gun_1 = 2;
		sleep 7000;
		move mis2 to y-axis [0] speed [6];
		return (0);
	}
	if( gun_1 == 2 )
	{
		emit-sfx 1024 + 0 from f3;
		move mis3 to y-axis [-4] now;		
		sleep 10;
		gun_1 = 0;
		sleep 7000;
		move mis3 to y-axis [0] speed [6];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = base2;
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) {
		piecenum = f1;
		return (0);
	}
	if (gun_1 == 1) {
		piecenum = f2;
		return (0);
	}
	if (gun_1 == 2) {
		piecenum = f3;
		return (0);
	}
	
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		if (isFloating) 
		{
			corpsetype = 1;
		}
		if (!isFloating) 
		{
			corpsetype = 2;
		}
		explode base2 type SHATTER;
		explode box1 type SHATTER;
		explode box2 type SHATTER;
		explode box3 type SHATTER;
		return corpsetype;
	}

	corpsetype = 3;
	explode base type SHATTER;
	explode base2 type SHATTER;
	explode box1 type SHATTER;
	explode box2 type SHATTER;
	explode box3 type SHATTER;

	return corpsetype;
}
