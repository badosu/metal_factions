#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, hull, bottom, h2,turret, sleeve, barrel, flash, wake1, chargept;

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<150>,<150>);
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn sleeve to x-axis <0.000000> speed <150.000000>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<300>,<300>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <300.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <300.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024+0 from flash;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flash;
	return (0);
}



AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = chargept;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = chargept;
	return (0);
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER;
		explode h2 type SHATTER;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (1);
	}

	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode turret type SHATTER;
	explode h2 type SHATTER;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
