#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  base, turret,firept1, wake1, wake2, sleeve, turret2,firept2, h2,h3,h4,h5;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			8

lua_checkAllowFiring() { return 0; }
lua_checkLockTarget() { return 0; }


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<100>,<100>);
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimPrimary(heading, pitch, canFire)
{
	call-script updateAimHelper1(heading,pitch,<400>,<400>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <400.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <400.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	// overkill prevention check
	canFire = (get GAME_FRAME) - (get WEAPON_RELOADSTATE(1)) > 0;
	if (canFire) {
		call-script lua_checkAllowFiring(1,(get TARGET_ID(1)));
		canFire = get LUA1;
	}
	if (!canFire) {
		return (0);
	}
	return (1);
}

FirePrimary()
{
	call-script lua_checkLockTarget(get TARGET_ID(1));
	emit-sfx 1024 + 0 from firept1;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = firept1;
}


AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
	emit-sfx 1024 + 1 from firept2;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QuerySecondary(piecenum)
{
	piecenum = firept2;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret2 type SHATTER;
		return (1);
	}
	explode turret2 type SHATTER;
	explode h2 type SHATTER;
	explode h3 type SHATTER;
	explode h4 type SHATTER;
	explode h5 type SHATTER;
	
	return (2);
}
