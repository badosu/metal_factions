#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2,sphere, nanospinner,p1,p2,p3,p4,p5,p6;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging, bBuilding, nanoPt;

#define SIG_BUILD			4


Build()
{
	while(TRUE)
	{
		if(bBuilding == TRUE)
		{
			emit-sfx 1024 + 0 from nanospinner;	
		}
		sleep 100;
	}
}


Activatescr()
{
	sleep 1;
	return (0);
}

Deactivatescr()
{
	sleep 1;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from sphere;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


Create()
{
	bBuilding = FALSE;
	nanoPt = [0];
	start-script Build();
	spin nanospinner around y-axis speed <720.000000>;
	return (0);
}


StartBuilding(Func_Var_1)
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;
	bBuilding = TRUE;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;

	bBuilding = FALSE;
	set INBUILDSTANCE to 0;
}

QueryNanoPiece(piecenum)
{
	if(nanoPt == [0])
	{
		piecenum = p1;
		nanoPt = [1];
		return (0);
	}
	if(nanoPt == [1])
	{
		piecenum = p2;
		nanoPt = [2];
		return (0);
	}
	if(nanoPt == [2])
	{
		piecenum = p3;
		nanoPt = [3];
		return (0);
	}
	if(nanoPt == [3])
	{
		piecenum = p4;
		nanoPt = [4];
		return (0);
	}
	if(nanoPt == [4])
	{
		piecenum = p5;
		nanoPt = [5];
		return (0);
	}
	if(nanoPt == [5])
	{
		piecenum = p6;
		nanoPt = [0];
		return (0);
	}
}


SweetSpot(piecenum)
{
	piecenum = sphere;
	return (0);
}

Killed(severity, corpsetype)
{
	bBuilding = FALSE;
	
	if( severity <= 50 )
	{
		explode sphere type SHATTER;
		return (1);
	}
	explode base type SHATTER;
	explode base2 type SHATTER;
	explode sphere type SHATTER;
	return (2);
}
