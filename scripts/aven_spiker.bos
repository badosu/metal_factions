#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 145

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<25>

piece  base, boxbase, box, mispt1, flare1,leg1, leg2, leg3, leg4, leg5, leg6,h3l,h3r, front, hinge;

static-var  bMoving, justMoved, isOpen;

#define SIG_AIM 2

walk()
{
	if( bMoving )
	{
		turn base to x-axis <2.000000> speed <20.000000> * SPEEDUP_FACTOR / 100;
		//turn base to z-axis <-1.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;

		turn leg6 to y-axis <20.000000> speed <100.967033> * SPEEDUP_FACTOR / 100;
		turn leg6 to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn leg5 to y-axis <-20.000000> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn leg5 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg4 to y-axis <45.060440> speed <120.038462> * SPEEDUP_FACTOR / 100;
		turn leg4 to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg3 to y-axis <40.412088> speed <300.060440> * SPEEDUP_FACTOR / 100;
		turn leg3 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg2 to y-axis <-20.093407> speed <100.368132> * SPEEDUP_FACTOR / 100;
		turn leg2 to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg1 to y-axis <15.137363> speed <300.681319> * SPEEDUP_FACTOR / 100;
		turn leg1 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}

	// only vertical
	if( bMoving )
	{
		//turn leg6 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg5 to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;

		//turn leg4 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg3 to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn leg2 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg1 to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}
	
	
	if( bMoving )
	{
		turn base to x-axis <-2.000000> speed <20.000000> * SPEEDUP_FACTOR / 100;
		//turn base to z-axis <1.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;

		turn leg6 to y-axis <-40.000000> speed <300.967033> * SPEEDUP_FACTOR / 100;
		turn leg6 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg5 to y-axis <20.000000> speed <100.038462> * SPEEDUP_FACTOR / 100;
		turn leg5 to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn leg4 to y-axis <-15.060440> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn leg4 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg3 to y-axis <-20.412088> speed <100.060440> * SPEEDUP_FACTOR / 100;
		turn leg3 to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg2 to y-axis <20.093407> speed <300.368132> * SPEEDUP_FACTOR / 100;
		turn leg2 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg1 to y-axis <-45.137363> speed <120.681319> * SPEEDUP_FACTOR / 100;
		turn leg1 to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}
	
	// only vertical
	if( bMoving )
	{

		turn leg6 to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;

		//turn leg5 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn leg4 to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn leg3 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn leg2 to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn leg1 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}
	
}


Stop()
{
	turn base to z-axis <0.000000> speed <7.000000>;
	turn base to x-axis <0.000000> speed <7.000000>;
	turn leg6 to y-axis <-25.000000> speed <237.000000>;
	turn leg6 to z-axis <0.000000> speed <237.000000>;
	turn leg5 to y-axis <0.000000> speed <237.000000>;
	turn leg5 to z-axis <0.000000> speed <237.000000>;
	turn leg4 to y-axis <0.000000> speed <237.000000>;
	turn leg4 to z-axis <0.000000> speed <237.000000>;
	turn leg1 to y-axis <0.000000> speed <237.000000>;
	turn leg1 to z-axis <0.000000> speed <237.000000>;
	turn leg2 to y-axis <0.000000> speed <237.000000>;
	turn leg2 to z-axis <0.000000> speed <237.000000>;
	turn leg3 to y-axis <25.000000> speed <237.000000>;
	turn leg3 to z-axis <0.000000> speed <237.000000>;
}

SmokeUnit(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		Func_Var_1 = get HEALTH;
		if( Func_Var_1 < 66 )
		{
			Func_Var_3 = 256 | 2;
			if( Rand( 1, 66 ) < Func_Var_1 )
			{
				Func_Var_3 = 256 | 1;
			}
			emit-sfx Func_Var_3 from base;
		}
		Func_Var_2 = Func_Var_1 * 50;
		if( Func_Var_2 < 200 )
		{
			Func_Var_2 = 200;
		}
		sleep Func_Var_2;
	}
	return;
}

MotionControl()
{
	var moving;
	while( TRUE )
	{
		moving = bMoving;
		if( moving )
		{
			call-script walk();
		}
		if (justMoved)
		{
			call-script stop();
			justMoved = FALSE;
		}
		if( !moving )
		{
			sleep 100;
		}
	}
	return;
}

Create()
{
	justMoved = FALSE;
	hide flare1;
	isOpen = FALSE;
	bMoving = 0;
	set ARMORED to TRUE;
	start-script MotionControl();
	start-script SmokeUnit();
	return;
}

StartMoving()
{
	bMoving = 1;
	return;
}

StopMoving()
{
	bMoving = 0;
	justMoved = TRUE;
	return;
}

SweetSpot(piecenum)
{
	piecenum = base;
	return;
}


Open()
{
	if (!isOpen)
	{
		set ARMORED to FALSE;
		turn box to x-axis <-90.000000> speed <90.000000>;
		wait-for-turn box around x-axis;
		isOpen = TRUE;
	}
}

Close()
{
	if (isOpen)
	{
		isOpen = FALSE;
		turn box to x-axis <0.000000> speed <90.000000>;
		wait-for-turn box around x-axis;
		set ARMORED to TRUE;
		sleep 200;
	}
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script Close();
	return (0);
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (!isOpen)
	{
		call-script Open();
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from flare1;
}

AimFromPrimary(piecenum)
{
	piecenum = boxbase;
	return;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode box type SHATTER;
		explode h3l type SHATTER;
		explode h3r type SHATTER;
		explode leg1 type SHATTER;
		explode leg6 type SHATTER;
		explode front type SHATTER;
		return (1);
	}
	explode box type SHATTER;
	explode hinge type FALL;
	explode h3l type SHATTER;
	explode h3r type SHATTER;
	explode front type SHATTER;
	explode leg1 type FALL | 8 | 16 | 2 | EXPTYPE_SMALLEXPLOSION;
	explode leg2 type FALL | 8 | 16 | 2 | EXPTYPE_MEDIUMEXPLOSION;
	explode leg3 type FALL | 8 | 16 | 2 | EXPTYPE_LARGEEXPLOSION;
	explode leg4 type FALL | 8 | 16 | 2 | EXPTYPE_XLARGEEXPLOSION;
	explode leg5 type FALL | 8 | 16 | 2 | EXPTYPE_BLOODEXPLOSION;
	explode leg6 type FALL | 8 | 16 | 2 | EXPTYPE_SMALLEXPLOSION;
	return (2);
}
