#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2,turret,slpt, sleeve, barrel, flash,sleeve2,barrel2,flash2,floater,floater2;

static-var  gun_1, currentHeading, currentPitch;


#define HEADING_TOLERANCE	<15.000000>
#define PITCH_TOLERANCE		<25.000000>

// Signal definitions
#define SIG_AIM				2



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



Create()
{
	hide flash;
	hide flash2;
	gun_1=111;
	currentHeading = <0>;
	currentPitch = <0>;
	start-script SmokeUnit();
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	currentHeading = <0>;
	currentPitch = <0>;
	turn turret to y-axis <0.000000> speed <90.016484>;
	turn slpt to x-axis <0.000000> speed <50.005495>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <420.038462>;
	turn slpt to x-axis <0.000000> - pitch speed <450.000000>;
	if ( get ABS(heading - currentHeading)  > HEADING_TOLERANCE || get ABS(pitch - currentPitch) > PITCH_TOLERANCE )
	{
		wait-for-turn turret around y-axis;
		wait-for-turn slpt around x-axis;
		currentHeading = heading;
		currentPitch = pitch;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
if( gun_1 == 111 )
	{
		emit-sfx 1024 + 0 from flash;
		sleep 100;
		gun_1 = 222;
		return (0);
	}
	if( gun_1 == 222 )
	{
		emit-sfx 1024 + 0 from flash2;
		sleep 100;
		gun_1 = 111;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 111 )
	{
		piecenum = flash;
	}
	if( gun_1 == 222 )
	{
		piecenum = flash2;
	}

}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flash;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flash type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode sleeve type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flash type FALL | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
