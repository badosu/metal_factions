#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 100

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece base,body,box,walls,barrel1,barrel2,barrel3,flare1,flare2,flare3,door1,door2,rmidsup,rmidleg,rmid2,rfrontsup,rfrontleg,rfront2,rbacksup,rbackleg,rback2,lbacksup,lbackleg,lback2,lmidsup,lmidleg,lmid2,lfrontsup,lfrontleg,lfront2,bombpt,flarept;
piece b2lbd1,b2lbd2,b3lbd1,b3lbd2,b4lbd1,b4lbd2,b5lbd1,b5lbd2,b2rbd1,b2rbd2,b3rbd1,b3rbd2,b4rbd1,b4rbd2,b5rbd1,b5rbd2,b2lbpt,b2rbpt,b3lbpt,b3rbpt,b4lbpt,b4rbpt,b5lbpt,b5rbpt;

static-var  bMoving, bAimTurning, isOpen, gun_1, aimTurnCounter, targetHeading;


// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4

lua_turnToTarget() { return 0; }


open()
{
	if (!isOpen)
	{
		set ARMORED to FALSE;
		move door1 to y-axis [-4] speed [25.000000];
		move door2 to y-axis [5] speed [25.000000];
		wait-for-move door1 along y-axis;
		wait-for-move door2 along y-axis;

		turn b2rbd1 to y-axis <-90> speed <300>;
		turn b2rbd2 to y-axis <90> speed <300>;
		turn b3rbd1 to y-axis <-90> speed <300>;
		turn b3rbd2 to y-axis <90> speed <300>;
		turn b4rbd1 to y-axis <-90> speed <300>;
		turn b4rbd2 to y-axis <90> speed <300>;
		turn b5rbd1 to y-axis <-90> speed <300>;
		turn b5rbd2 to y-axis <90> speed <300>;
		turn b2lbd1 to y-axis <-90> speed <300>;
		turn b2lbd2 to y-axis <90> speed <300>;
		turn b3lbd1 to y-axis <-90> speed <300>;
		turn b3lbd2 to y-axis <90> speed <300>;
		turn b4lbd1 to y-axis <-90> speed <300>;
		turn b4lbd2 to y-axis <90> speed <300>;
		turn b5lbd1 to y-axis <-90> speed <300>;
		turn b5lbd2 to y-axis <90> speed <300>;
		wait-for-turn b2rbd1 around y-axis;
		move b2rbd1 to x-axis [-4.5] speed [30];
		move b2rbd2 to x-axis [-4.5] speed [30];
		move b3rbd1 to x-axis [-4.5] speed [30];
		move b3rbd2 to x-axis [-4.5] speed [30];
		move b4rbd1 to x-axis [-4.5] speed [30];
		move b4rbd2 to x-axis [-4.5] speed [30];
		move b5rbd1 to x-axis [-4.5] speed [30];
		move b5rbd2 to x-axis [-4.5] speed [30];
		move b2lbd1 to x-axis [4.5] speed [30];
		move b2lbd2 to x-axis [4.5] speed [30];
		move b3lbd1 to x-axis [4.5] speed [30];
		move b3lbd2 to x-axis [4.5] speed [30];
		move b4lbd1 to x-axis [4.5] speed [30];
		move b4lbd2 to x-axis [4.5] speed [30];
		move b5lbd1 to x-axis [4.5] speed [30];
		move b5lbd2 to x-axis [4.5] speed [30];
		sleep 100;
		isOpen = TRUE;
	}
}

close()
{
	if (isOpen)
	{
		isOpen = FALSE;
		move door1 to y-axis [0] speed [25.000000];
		move door2 to y-axis [0] speed [25.000000];

		move b2rbd1 to x-axis [0] speed [30];
		move b2rbd2 to x-axis [0] speed [30];
		move b3rbd1 to x-axis [0] speed [30];
		move b3rbd2 to x-axis [0] speed [30];
		move b4rbd1 to x-axis [0] speed [30];
		move b4rbd2 to x-axis [0] speed [30];
		move b5rbd1 to x-axis [0] speed [30];
		move b5rbd2 to x-axis [0] speed [30];
		move b2lbd1 to x-axis [0] speed [30];
		move b2lbd2 to x-axis [0] speed [30];
		move b3lbd1 to x-axis [0] speed [30];
		move b3lbd2 to x-axis [0] speed [30];
		move b4lbd1 to x-axis [0] speed [30];
		move b4lbd2 to x-axis [0] speed [30];
		move b5lbd1 to x-axis [0] speed [30];
		move b5lbd2 to x-axis [0] speed [30];
		wait-for-move b2rbd1 along x-axis;
		turn b2rbd1 to y-axis <0> speed <300>;
		turn b2rbd2 to y-axis <0> speed <300>;
		turn b3rbd1 to y-axis <0> speed <300>;
		turn b3rbd2 to y-axis <0> speed <300>;
		turn b4rbd1 to y-axis <0> speed <300>;
		turn b4rbd2 to y-axis <0> speed <300>;
		turn b5rbd1 to y-axis <0> speed <300>;
		turn b5rbd2 to y-axis <0> speed <300>;
		turn b2lbd1 to y-axis <0> speed <300>;
		turn b2lbd2 to y-axis <0> speed <300>;
		turn b3lbd1 to y-axis <0> speed <300>;
		turn b3lbd2 to y-axis <0> speed <300>;
		turn b4lbd1 to y-axis <0> speed <300>;
		turn b4lbd2 to y-axis <0> speed <300>;
		turn b5lbd1 to y-axis <0> speed <300>;
		turn b5lbd2 to y-axis <0> speed <300>;
		wait-for-turn b2rbd1 around y-axis;
				
		wait-for-move door1 along y-axis;
		wait-for-move door2 along y-axis;
		
		set ARMORED to TRUE;
	}
	isOpen = FALSE;
}


handleActivation()
{
	while (TRUE)
	{ 
		if (get ACTIVATION) 
		{
			call-script open();
		}
		else
		{
			call-script close();
		}
		sleep 100;
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

walkAimTurn()
{
	if( bAimTurning)
	{
		turn rmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		
		turn base to x-axis <-0.5> speed <10.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to y-axis <5.000000> speed <100.967033> * SPEEDUP_FACTOR / 100;
		turn lfrontleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn lmidleg to y-axis <-5.000000> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn lmidleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lbackleg to y-axis <12.060440> speed <120.038462> * SPEEDUP_FACTOR / 100;
		turn lbackleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rfrontleg to y-axis <10.412088> speed <300.060440> * SPEEDUP_FACTOR / 100;
		turn rfrontleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rmidleg to y-axis <-5.093407> speed <100.368132> * SPEEDUP_FACTOR / 100;
		turn rmidleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rbackleg to y-axis <4.137363> speed <300.681319> * SPEEDUP_FACTOR / 100;
		turn rbackleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}

	// only vertical
	if(bAimTurning)
	{
		
		turn base to x-axis <0.500000> speed <10.000000> * SPEEDUP_FACTOR / 100;
		
		turn lmidleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		turn rfrontleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		turn rbackleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	
	if(bAimTurning)
	{
		turn base to x-axis <-0.500000> speed <10.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to y-axis <-10.000000> speed <300.967033> * SPEEDUP_FACTOR / 100;
		turn lfrontleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lmidleg to y-axis <5.000000> speed <100.038462> * SPEEDUP_FACTOR / 100;
		turn lmidleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn lbackleg to y-axis <-4.060440> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn lbackleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn rfrontleg to y-axis <-5.412088> speed <100.060440> * SPEEDUP_FACTOR / 100;
		turn rfrontleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rmidleg to y-axis <5.093407> speed <300.368132> * SPEEDUP_FACTOR / 100;
		turn rmidleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rbackleg to y-axis <-12.137363> speed <120.681319> * SPEEDUP_FACTOR / 100;
		turn rbackleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	// only vertical
	if(bAimTurning)
	{
		turn base to x-axis <0.500000> speed <10.000000> * SPEEDUP_FACTOR / 100;
		
		turn rmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		turn lbackleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		turn rmidleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	return (0);
}

walk()
{
	if( bMoving)
	{
		turn rmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		
		turn base to x-axis <-0.5> speed <10.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to y-axis <20.000000> speed <100.967033> * SPEEDUP_FACTOR / 100;
		turn lfrontleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn lmidleg to y-axis <-20.000000> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn lmidleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lbackleg to y-axis <45.060440> speed <120.038462> * SPEEDUP_FACTOR / 100;
		turn lbackleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rfrontleg to y-axis <40.412088> speed <300.060440> * SPEEDUP_FACTOR / 100;
		turn rfrontleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rmidleg to y-axis <-20.093407> speed <100.368132> * SPEEDUP_FACTOR / 100;
		turn rmidleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rbackleg to y-axis <15.137363> speed <300.681319> * SPEEDUP_FACTOR / 100;
		turn rbackleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}

	// only vertical
	if( bMoving)
	{
		turn base to x-axis <0.5> speed <10.000000> * SPEEDUP_FACTOR / 100;

		turn lmidleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		turn rfrontleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		turn rbackleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	
	if( bMoving)
	{
		turn base to x-axis <-0.500000> speed <10.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to y-axis <-40.000000> speed <300.967033> * SPEEDUP_FACTOR / 100;
		turn lfrontleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lmidleg to y-axis <20.000000> speed <100.038462> * SPEEDUP_FACTOR / 100;
		turn lmidleg to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn lbackleg to y-axis <-15.060440> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn lbackleg to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn rfrontleg to y-axis <-20.412088> speed <100.060440> * SPEEDUP_FACTOR / 100;
		turn rfrontleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rmidleg to y-axis <20.093407> speed <300.368132> * SPEEDUP_FACTOR / 100;
		turn rmidleg to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rbackleg to y-axis <-45.137363> speed <120.681319> * SPEEDUP_FACTOR / 100;
		turn rbackleg to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	// only vertical
	if( bMoving)
	{
		turn base to x-axis <0.5> speed <10.000000> * SPEEDUP_FACTOR / 100;
		
		turn rmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		turn lmid2 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;

		turn lfrontleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		turn lbackleg to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		turn rmidleg to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
	
	return (0);
}


MotionControl(justMoved)
{
	justMoved = TRUE;
	while( TRUE )
	{
		if( bMoving)
		{
			call-script walk();
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			if (bAimTurning) {
				call-script walkAimTurn();
				//get PRINT(bAimTurning);
				bAimTurning = FALSE;
				justMoved = TRUE;
			}
			else
			{
				if( justMoved )
				{
					turn lfrontleg to y-axis <0.000000> speed <237.000000>;
					turn lfrontleg to z-axis <0.000000> speed <237.000000>;
					turn lmidleg to y-axis <0.000000> speed <237.000000>;
					turn lmidleg to z-axis <0.000000> speed <237.000000>;
					turn lbackleg to y-axis <0.000000> speed <237.000000>;
					turn lbackleg to z-axis <0.000000> speed <237.000000>;
					turn rbackleg to y-axis <0.000000> speed <237.000000>;
					turn rbackleg to z-axis <0.000000> speed <237.000000>;
					turn rmidleg to y-axis <0.000000> speed <237.000000>;
					turn rmidleg to z-axis <0.000000> speed <237.000000>;
					turn rfrontleg to y-axis <0.000000> speed <237.000000>;
					turn rfrontleg to z-axis <0.000000> speed <237.000000>;
					turn lbackleg to y-axis <25.000000> speed <300.000000>;
					turn rbackleg to y-axis <-25.000000> speed <300.000000>;
					turn rfrontleg to y-axis <25.000000> speed <300.000000>;
					turn lfrontleg to y-axis <-25.000000> speed <300.000000>;
					turn base to x-axis <0> speed <30>;
					justMoved = FALSE;
				}
			}
			sleep 100;
		}
	}
	return (0);
}

handleAimTurn() {
	while(TRUE) {
		// make unit turn to face target 	
		while (aimTurnCounter > 0 && (targetHeading < <-10> || targetHeading > <10>)) {
			aimTurnCounter = aimTurnCounter - 1;
			if (bMoving && (targetHeading < <-25> || targetHeading > <25>)) {
				continue;
			}
			call-script lua_turnToTarget(1,6);
			bAimTurning = TRUE;
			sleep 30;
		}
		sleep 30;
	}
}

Create()
{
	bMoving = FALSE;
	isOpen = FALSE;
	bAimTurning = FALSE;
	aimTurnCounter = 0;
	targetHeading = 0;
	
	start-script MotionControl();
	start-script SmokeUnit();
	start-script handleActivation();
	start-script handleAimTurn();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

RestoreAfterDelay()
{
	sleep 2000;
	bAimTurning = FALSE;
	aimTurnCounter = 0;
	return (0);
}

AimPrimary(heading, pitch)
{
	aimTurnCounter = 10;
	targetHeading = heading;
	if (!isOpen)
	{
		bAimTurning = FALSE;
		return (0);
	}
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	// handleAimTurn will try to keep it pointed towards the target
	// but let the tolerance decide whether it can fire or not
			
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024+3 from b2lbpt;
	emit-sfx 1024+3 from b2rbpt;
	emit-sfx 1024+3 from b3lbpt;
	emit-sfx 1024+3 from b3rbpt;
	emit-sfx 1024+3 from b4lbpt;
	emit-sfx 1024+3 from b4rbpt;
	emit-sfx 1024+3 from b5lbpt;
	emit-sfx 1024+3 from b5rbpt;
	sleep 250;		
	if (get ACTIVATION)
	{
		emit-sfx 1024+4 from b2lbpt;
		emit-sfx 1024+4 from b2rbpt;
		emit-sfx 1024+4 from b3lbpt;
		emit-sfx 1024+4 from b3rbpt;
		emit-sfx 1024+4 from b4lbpt;
		emit-sfx 1024+4 from b4rbpt;
		emit-sfx 1024+4 from b5lbpt;
		emit-sfx 1024+4 from b5rbpt;
	}
}
Shot1()
{
	if (gun_1 == 0) {
		emit-sfx 1024+0 from flare1;
		gun_1 = 1;
		return (0);
	}
	if (gun_1 == 1) {
		emit-sfx 1024+0 from flare2;
		gun_1 = 2;
		return (0);
	}
	if (gun_1 == 2) {
		emit-sfx 1024+0 from flare3;
		gun_1 = 0;
		return (0);		
	}	
}

AimFromPrimary(piecenum)
{
	piecenum = walls;
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) {
		piecenum = flare1;
		return (0);
	}
	if (gun_1 == 1) {
		piecenum = flare2;
		return (0);
	}
	if (gun_1 == 2) {
		piecenum = flare3;
		return (0);		
	}	
	return (0);
}


AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
	emit-sfx 1024+1 from flarept;
}

AimFromSecondary(piecenum)
{
	piecenum = flarept;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flarept;
	return (0);
}

AimTertiary(heading, pitch)
{
	return (1);
}

FireTertiary()
{
	emit-sfx 1024+2 from bombpt;
}

AimFromTertiary(piecenum)
{
	piecenum = bombpt;
	return (0);
}

QueryTertiary(piecenum)
{
	piecenum = bombpt;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode body type SHATTER;
		explode walls type SHATTER;
		return (1);
	}
	explode body type SHATTER;
	explode walls type SHATTER;
	return (2);
}
