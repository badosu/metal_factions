#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<25>

piece  base, rwing, lwing, tail, ljet, rjet, ljp, rjp, lweapon,lbarrel,lflare, rweapon, rbarrel, rflare, base2, base3,weapon,sleeve,barrel1,barrel2,flare1,flare2, turholder,rdoor,ldoor;

static-var  statechg_DesiredState, statechg_StateChanging, isFlying, gun_1, gun_2, isOpen, bAiming;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM 2


activatescr()
{
	if( !isFlying)
	{
		sleep 500;
		isFlying = TRUE;
	}
	sleep 66;
}


deactivatescr()
{
	if( isFlying )
	{
		isFlying = FALSE;
		sleep 500;
	}
	sleep 66;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = 1;
	statechg_StateChanging = 0;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = 1;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = 0;
}


open()
{
	//set ARMORED to 0;
	turn rdoor to z-axis <90.000000> speed <280.000000>;
	turn ldoor to z-axis <-90.000000> speed <280.000000>;
	wait-for-turn ldoor around z-axis;
	move rdoor to y-axis  [5.000000] speed [80.000000];
	move ldoor to y-axis  [5.000000] speed [80.000000];
	move turholder to y-axis [-5.000000] speed [180.000000];
	wait-for-move ldoor along y-axis;
	wait-for-move turholder along y-axis;
	isOpen = TRUE;
	return (0);
}

close()
{
	isOpen = FALSE;
	turn weapon to y-axis <0.000000> speed <400.000000>;
	turn sleeve to x-axis <0> speed <400.000000>;
	wait-for-turn weapon around y-axis;
	wait-for-turn sleeve around x-axis;

	move turholder to y-axis [0.000000] speed [80.000000];
	wait-for-move turholder along y-axis;

	move rdoor to y-axis  [0.000000] speed [80.000000];
	move ldoor to y-axis  [0.000000] speed [80.000000];
	wait-for-move ldoor along y-axis;

	turn rdoor to z-axis <0.000000> speed <280.000000>;
	turn ldoor to z-axis <0.000000> speed <280.000000>;
	wait-for-turn ldoor around z-axis;
	
	//set ARMORED to 1;
	return (0);
}

checkOpen() {
	while (TRUE)
	{
		if (bAiming) 
		{
			call-script open();
		}
		sleep 100;
	}
}

Create()
{
	isFlying = FALSE;
	gun_1 = 0;
	gun_2 = 0;
	isOpen = FALSE;
	bAiming = FALSE;
	call-script stopAimHelper1(<1000>,<1000>);
	call-script InitState();
	start-script checkOpen();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimPrimary()
{
	if(!isFlying)
	{
		return (0);
	}
	return (1);
}

FirePrimary()
{
	if (gun_1 == 0) {
		emit-sfx 1024 from lflare;
		sleep 100;
		gun_1 = 1;
		return (0);
	}
	if (gun_1 == 1) {
		emit-sfx 1024 from rflare;
		sleep 100;
		gun_1 = 0;
		return (0);
	}
	
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) {
		piecenum = lflare;
		return (0);
	}
	if (gun_1 == 1) {
		piecenum = rflare;
		return (0);
	}
}


restoreAfterDelay() 
{
	sleep 2000;
	call-script stopAimHelper1(<600>,<600>);
	turn weapon to y-axis <0> speed <600>;
	turn sleeve to x-axis <0> speed <600>;
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	bAiming = FALSE;	
	call-script close();
}

AimFromSecondary(piecenum)
{
	piecenum = weapon;
}

AimSecondary(heading,pitch)
{
	if(!isFlying)
	{
		return (0);
	}
	bAiming = TRUE;
	if(!isOpen)
	{
		return(0);
	}

	call-script updateAimHelper1(heading,pitch,<900>,<900>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn weapon to y-axis heading speed <900.000000>;
	turn sleeve to x-axis <0>-pitch speed <900.000000>;
	if (!aimReady1)
	{
		wait-for-turn weapon around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script restoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if (gun_2 == 0) {
		emit-sfx 1024 from flare1;
		sleep 50;
		gun_2 = 1;
		return (0);
	}
	if (gun_2 == 1) {
		emit-sfx 1024 from flare2;
		sleep 50;
		gun_2 = 0;
		return (0);
	}
}

QuerySecondary(piecenum)
{
	if (gun_2 == 0) {
		piecenum = flare1;
		return (0);
	}
	if (gun_2 == 1) {
		piecenum = flare2;
		return (0);		
	}	
	return (0);
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	//start-script Crashing();

	corpsetype = 3;
	explode base2 type SHATTER;
	explode lwing type SHATTER;
	explode rwing type SHATTER;
	explode base3 type SHATTER;
	explode tail type SHATTER;
	explode lweapon type SHATTER;
	explode rweapon type SHATTER;
	explode ljet type SHATTER;
}
