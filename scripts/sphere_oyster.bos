#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2,turret,slpt, sleeve, barrel1,flash1,torp1,barrel2,flash2,torp2,rdoor,ldoor;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2

lua_stopFiring() { return 0; }

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


open()
{
	turn rdoor to z-axis <-70.000000> speed <100.000000>;
	turn ldoor to z-axis <70.000000> speed <100.000000>;
	wait-for-turn rdoor around z-axis;
	wait-for-turn ldoor around z-axis;
	SET ARMORED to FALSE;	
}

close()
{
	turn rdoor to z-axis <0.000000> speed <100.000000>;
	turn ldoor to z-axis <0.000000> speed <100.000000>;
	wait-for-turn rdoor around z-axis;
	wait-for-turn ldoor around z-axis;
	SET ARMORED to TRUE;	

}

RestoreAfterDelay()
{
	if((get STANDINGFIREORDERS) > 0)
	{
		sleep DEFAULT_WEAPON_RESTORE_DELAY;
	} 
	else 
	{
		sleep 600;
	}
	turn turret to y-axis <0.000000> speed <90.016484>;
	turn slpt to x-axis <0.000000> speed <50.005495>;
	call-script close();
}

// if fire state changes to hold fire, force closure
checkClose(fireState,previousFireState)
{
	while (TRUE)
	{
		fireState = (get STANDINGFIREORDERS);
		
		if (fireState == 0 && previousFireState > 0) 
		{
			signal SIG_AIM;
			call-script lua_stopFiring();
			call-script RestoreAfterDelay();
		}
	
		previousFireState = fireState;
		sleep 100;
	}
}
Create()
{
	hide flash1;
	hide flash2;
	gun_1 = [0];
	start-script SmokeUnit();
	start-script checkClose();
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	call-script open();
	turn turret to y-axis heading speed <150.038462>;
	turn slpt to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn slpt around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun_1 == [0])
	{
		move torp1 to z-axis [-3.000000] now;
		emit-sfx 1024+0 from flash1;
		sleep 300;
		gun_1 = [1];
		sleep 3000;
		move torp1 to z-axis [0.000000] speed [2.000000];
		gun_1 = [1];
		return (0);
	}
	if (gun_1 == [1])
	{
		move torp2 to z-axis [-3.000000] now;
		emit-sfx 1024+0 from flash2;
		sleep 300;
		gun_1 = [0];
		sleep 3000;		
		move torp2 to z-axis [0.000000] speed [2.000000];
		return (0);
	}
	
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if (gun_1 == [0])
	{
		piecenum = flash1;
	}
	if (gun_1 == [1])
	{
		piecenum = flash2;
	}
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER;
		explode slpt type SHATTER;
		explode sleeve type SHATTER;
		return (1);
	}
	explode base type SHATTER;
	explode base2 type SHATTER;
	explode turret type SHATTER;
	explode slpt type SHATTER;
	explode sleeve type SHATTER;
	return (2);
}
