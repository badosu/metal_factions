#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 	90

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>


piece  gp, base, turret, sleeve, llauncher, rlauncher,lflare,rflare,base2,t1,t2,t1cover,t2cover;

static-var gun_1;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2

#include "tankthreads.h"

lua_checkAllowFiring() { return 0; }
lua_checkLockTarget() { return 0; }


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	start-script AnimateTracks();
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<200>,<200>);
	turn turret to y-axis <0.000000> speed <200>;
	turn sleeve to x-axis <0.000000> speed <200>;
}

AimPrimary(heading, pitch, canFire)
{
	call-script updateAimHelper1(heading,pitch,<400>,<400>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <400.038462>;
	turn sleeve to x-axis <0.000000> - pitch speed <400.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	start-script RestoreAfterDelay();
	// overkill prevention check
	canFire = (get GAME_FRAME) - (get WEAPON_RELOADSTATE(1)) > 0;
	if (canFire) {
		call-script lua_checkAllowFiring(1,(get TARGET_ID(1)));
		canFire = get LUA1;
	}
	if (!canFire) {
		return (0);
	}		
	return (1);
}

FirePrimary()
{
	call-script lua_checkLockTarget(get TARGET_ID(1));
	if (gun_1 == 0) 
	{
		emit-sfx 1024 from lflare;
		sleep 100;
		gun_1 = 1;
	}
	else
	{
		emit-sfx 1024 from rflare;
		sleep 100;
		gun_1 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0)
	{
		piecenum = lflare;
	}
	else
	{
		piecenum = rflare;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER;
		explode llauncher type SHATTER;
		explode rlauncher type SHATTER;
		return (1);
	}

	explode base type SHATTER;
	explode base2 type SHATTER;
	explode turret type SHATTER;
	explode llauncher type SHATTER;
	explode rlauncher type SHATTER;

	return (2);
}
