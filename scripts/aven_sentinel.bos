#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flash1, flash2, base, turret, guns, barrel1, barrel2, floatbase, fb2;

static-var  gun_1, isFloating;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{

	hide floatbase;
	hide fb2;
	isFloating = FALSE;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < [0])
	{
		isFloating = TRUE;
		show floatbase;
		show fb2;
	}

	gun_1 = 0;
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <200.000000>;
	turn guns to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn guns around x-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 from flash1;
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 from flash2;
	}
	sleep 100;
	gun_1 = !gun_1;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flash1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flash2;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flash1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flash2;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		if (isFloating) 
		{
			corpsetype = 1;
		}
		if (!isFloating) 
		{
			corpsetype = 2;
		}
		explode barrel1 type SHATTER | BITMAP1;
		explode barrel2 type SHATTER | BITMAP1;
		explode guns type SHATTER | BITMAP4;
		return corpsetype;
	}

	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode guns type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return corpsetype;
}
