#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<15>
#define PITCH_TOLERANCE		<15>

piece  base, hull, bottom, h2,turret, weapon, sleeve1, barrel1, flare1, sleeve2, barrel2, flare2, wake1, wake2, depthcharge, fmisbase, fdoor1, fdoor2, fhole, fmispt, bmisbase, bdoor1, bdoor2, bhole, bmispt;

static-var  gun_1, gun_2;

#include "aimhelper1.h"

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM2			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	start-script SmokeUnit();
	call-script stopAimHelper1(<1000>,<1000>);
	gun_1 = [0];
	gun_2 = [0];
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<80>,<80>);
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn sleeve1 to x-axis <0.000000> speed <80.000000>;
	turn sleeve2 to x-axis <0.000000> speed <80.000000>;
	return (0);
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 450;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<70>,<70>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <70.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <70.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <70.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve1 around x-axis;
		wait-for-turn sleeve2 around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == [0])
	{
		move barrel1 to z-axis [-6.500000] now;
		emit-sfx 1024+0 from flare1;
		sleep 100;
		move barrel1 to z-axis [0.000000] speed [6.000000];
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1])
	{
		move barrel2 to z-axis [-6.500000] now;
		emit-sfx 1024+0 from flare2;
		sleep 100;
		move barrel2 to z-axis [0.000000] speed [6.000000];
		gun_1 = [0];
		return (0);
	}
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum = flare1;
	}
	if(gun_1 == [1])
	{
		piecenum = flare2;
	}	
	return (0);
}


AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
	if (gun_2==[0])
	{
		turn bdoor1 to z-axis <-40.000000> speed <400.000000>;
		turn bdoor2 to z-axis <40.000000> speed <400.000000>;
		emit-sfx 1024 from bmispt;
		sleep 100;
		gun_2=[1];
		sleep 1000;
		turn bdoor1 to z-axis <0.000000> speed <80.000000>;
		turn bdoor2 to z-axis <0.000000> speed <80.000000>;
		return (1);
	}
	if (gun_2==[1])
	{
		turn fdoor1 to z-axis <-40.000000> speed <400.000000>;
		turn fdoor2 to z-axis <40.000000> speed <400.000000>;
		emit-sfx 1024 from fmispt;
		sleep 100;
		gun_2=[0];
		sleep 1000;
		turn fdoor1 to z-axis <0.000000> speed <80.000000>;
		turn fdoor2 to z-axis <0.000000> speed <80.000000>;

		return (1);
	}
}

AimFromSecondary(piecenum)
{
	if(gun_2 == [0])
	{
		piecenum = bhole;
	}
	if(gun_2 == [1])
	{
		piecenum = fhole;
	}	
	return (0);
}

QuerySecondary(piecenum)
{
	if(gun_2 == [0])
	{
		piecenum = bmispt;
	}
	if(gun_2 == [1])
	{
		piecenum = fmispt;
	}	
	return (0);
}


SweetSpot(piecenum)
{
	piecenum = hull;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		return (1);
	}
	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode turret type SHATTER;
	explode h2 type SHATTER;
	explode sleeve1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleeve2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (2);
}
