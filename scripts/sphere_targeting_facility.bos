#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, b1,b2,b3,b4, a1, light1, light1off, emit1;

static-var  wasActive, statechg_DesiredState, statechg_StateChanging;

#define SIG_INT   2

light()
{
	while (TRUE)
	{
		if( get ACTIVATION )
		{
			emit-sfx 1024+0 from emit1;
		}
		sleep 50;
	}

}

activatescr()
{
	show light1;
	hide light1off;
	sleep 1000;		
	return (0);
}

deactivatescr()
{

	hide light1;
	show light1off;
	sleep 1000;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	dont-cache light1;
	dont-cache light1off;
	dont-shade light1;
	dont-shade light1off;
	
	hide light1;
	show light1off;
	wasActive = [0];
	set ARMORED to 1;
	while( get BUILD_PERCENT_LEFT )
	{
		set ACTIVATION to 0;
		set ARMORED to 1;
		sleep 1000;
	}
	start-script light();
	return (0);
}

Activate()
{
	while( get BUILD_PERCENT_LEFT )
	{
		set ACTIVATION to 0;
		set ARMORED to 1;
		sleep 1000;
	}
	start-script RequestState(0);
	set ARMORED to 0;
	return (0);
}

Deactivate()
{
	set ARMORED to 1;
	start-script RequestState(1);
	return (0);
}


reactivate()
{
	set-signal-mask SIG_INT;
	sleep 10000;
	set ARMORED to 0;
	set ACTIVATION to 10000;
	wasActive = [0];
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	signal SIG_INT;
	if( get ACTIVATION )
	{
		wasActive = [1];
		set ACTIVATION to 0;
		set ARMORED to 1;
	}
	if(wasActive)
	{
		call-script reactivate();	
	}

	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode a1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP1;
		explode a1 type BITMAPONLY | BITMAP2;
		explode b1 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode a1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP1;
		explode light1 type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode a1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP1;
		explode light1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode light1off type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode light1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode a1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode b2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode light1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode light1off type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode light1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode a1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode b1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode b2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	
	return (0);
}
