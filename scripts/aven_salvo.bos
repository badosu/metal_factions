#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


piece  GP, Base, Wake1, Wake2, Wake3, Wake4, Wake5, Wake6, Wake7, Wake8, front,sfront, turret, sleeve, flare1,flare2,flare3,flare4,flare5,flare6,flare7,flare8,flare9,flare10,mis1,mis2,mis3,mis4,mis5,mis6,mis7,mis8,mis9,mis10,b2,b3,b5;

static-var  gun_1, terrainType, wobble, isFiring, fireHeading, unitFireHeading;


// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

#define ROCKET_RESPAWN_DELAY 17000

WobbleUnit()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		if( wobble == 1 )
		{
			move Base to y-axis [2.000000] speed [2.500000];
		}
		if( wobble == 0 )
		{
			move Base to y-axis [4.500000] speed [2.500000];
		}
		wobble = !wobble;
		sleep 750;
	}
	return (0);
}


HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn Base to z-axis <0.010989> * Func_Var_2 speed <105.016484>;
	turn Base to x-axis <0.010989> * Func_Var_1 speed <105.016484>;
	wait-for-turn Base around z-axis;
	wait-for-turn Base around x-axis;
	turn Base to z-axis <0.000000> speed <30.005495>;
	turn Base to x-axis <0.000000> speed <30.005495>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from Base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainType <= 2 )
		{
			//emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			//emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			//emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			//emit-sfx 3 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	return (0);
}

setSFXoccupy(type)
{
	terrainType = type;
	return (0);
}

RestoreAfterDelay(setMask)
{
	if (setMask) {
		set-signal-mask SIG_AIM;
	}
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn sleeve to x-axis <0.000000> speed <80.000000>;
	return (0);
}

AimLock() 
{
	var heading;
	while(TRUE) {
		// override aim when firing to compensate for the body orientation if the unit turns
		if (isFiring) {
			heading = (get HEADING);
			if (heading != unitFireHeading) {
				turn turret to y-axis (fireHeading - heading + unitFireHeading) speed <360.000000>;
				start-script RestoreAfterDelay(TRUE);
			}
		}
		sleep 30;
	}
}

Create()
{
	gun_1 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	isFiring = FALSE;
	fireHeading = <999>;
	unitFireHeading = <999>;	
	start-script AimLock();
	start-script SmokeUnit();
	start-script WobbleUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	if (!isFiring) {
		turn turret to y-axis heading speed <90.000000>;
		turn sleeve to x-axis <0.000000> - pitch speed <90.000000>;
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
		fireHeading = heading;
	}
	
	start-script RestoreAfterDelay(); 	
	return (1);
}

FirePrimary()
{
	unitFireHeading = get HEADING;
	isFiring = TRUE;
	sleep 4000;
	isFiring = FALSE;
	return;
}
Shot1()
{
	if(gun_1 == 0)
	{
		emit-sfx 1024+0 from flare1;
		move mis1 to z-axis [-5] now;
		sleep 30;
		gun_1 = 1;
		sleep ROCKET_RESPAWN_DELAY;
		move mis1 to z-axis [0] speed [5];
		return 0;
	}
	if(gun_1 == 1)
	{
		emit-sfx 1024+0 from flare2;
		move mis2 to z-axis [-5] now;
		sleep 30;
		gun_1 = 2;
		sleep ROCKET_RESPAWN_DELAY;
		move mis2 to z-axis [0] speed [5];
		return 0;
	}
	if(gun_1 == 2)
	{
		emit-sfx 1024+0 from flare3;
		move mis3 to z-axis [-5] now;
		sleep 30;
		gun_1 = 3;
		sleep ROCKET_RESPAWN_DELAY;
		move mis3 to z-axis [0] speed [5];
		return 0;
	}
	if(gun_1 == 3)
	{
		emit-sfx 1024+0 from flare4;
		move mis4 to z-axis [-5] now;
		sleep 30;
		gun_1 = 4;
		sleep ROCKET_RESPAWN_DELAY;
		move mis4 to z-axis [0] speed [5];
		return 0;
	}
	if(gun_1 == 4)
	{
		emit-sfx 1024+0 from flare5;
		move mis5 to z-axis [-5] now;
		sleep 30;
		gun_1 = 5;
		sleep ROCKET_RESPAWN_DELAY;
		move mis5 to z-axis [0] speed [5];
		return 0;
	}
	if(gun_1 == 5)
	{
		emit-sfx 1024+0 from flare6;
		move mis6 to z-axis [-5] now;
		sleep 30;
		gun_1 = 6;
		sleep ROCKET_RESPAWN_DELAY;
		move mis6 to z-axis [0] speed [5];
		return 0;
	}
	if(gun_1 == 6)
	{
		emit-sfx 1024+0 from flare7;
		move mis7 to z-axis [-5] now;
		sleep 30;
		gun_1 = 7;
		sleep ROCKET_RESPAWN_DELAY;
		move mis7 to z-axis [0] speed [5];
		return 0;
	}
	if(gun_1 == 7)
	{
		emit-sfx 1024+0 from flare8;
		move mis8 to z-axis [-5] now;
		sleep 30;
		gun_1 = 8;
		sleep ROCKET_RESPAWN_DELAY;
		move mis8 to z-axis [0] speed [5];
		return 0;
	}
	if(gun_1 == 8)
	{
		emit-sfx 1024+0 from flare9;
		move mis9 to z-axis [-5] now;
		sleep 30;
		gun_1 = 9;
		sleep ROCKET_RESPAWN_DELAY;
		move mis9 to z-axis [0] speed [5];
		return 0;
	}
	if(gun_1 == 9)
	{
		emit-sfx 1024+0 from flare10;
		move mis10 to z-axis [-5] now;
		sleep 30;
		gun_1 = 0;
		sleep ROCKET_RESPAWN_DELAY;
		move mis10 to z-axis [0] speed [5];
		return 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}


QueryPrimary(piecenum)
{
	if(gun_1 == 0)
	{
		piecenum = flare1;
	}
	else if(gun_1 == 1)
	{
		piecenum = flare2;
	}
	else if(gun_1 == 2)
	{
		piecenum = flare3;
	}
	else if(gun_1 == 3)
	{
		piecenum = flare4;
	}
	else if(gun_1 == 4)
	{
		piecenum = flare5;
	}
	else if(gun_1 == 5)
	{
		piecenum = flare6;
	}
	else if(gun_1 == 6)
	{
		piecenum = flare7;
	}
	else if(gun_1 == 7)
	{
		piecenum = flare8;
	}
	else if(gun_1 == 8)
	{
		piecenum = flare9;
	}
	else if(gun_1 == 9)
	{
		piecenum = flare10;
	}

	return (0);
}


SweetSpot(piecenum)
{
	piecenum = Base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode sfront type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (1);
	}

	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode front type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode sfront type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	
	explode b2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode b3 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode b5 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (2);
}
