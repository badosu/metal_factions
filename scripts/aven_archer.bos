#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, emit11, emit12, emit21, emit22, mb11,mb12,mb21,mb22, base, missilebox1, missilebox2, turretgun1,
       turretgun2, wake1, wake2, gunbarrel1, gunbarrel2;

static-var  gun_1, gun_2, gun_3, restore_delay;

// Signal definitions
#define SIG_AIM_3			2
#define SIG_AIM_2			4
#define SIG_AIM				8
#define SIG_MOVE			16


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare2;
	hide flare1;
	gun_1 = [0];
	gun_2 = [0];
	gun_3 = [0];
	restore_delay = 3000;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
	return (0);
}


RestoreAfterDelay1()
{
	sleep restore_delay;
	turn turretgun1 to y-axis <0.000000> speed <75.000000>;
	turn turretgun2 to x-axis <0.000000> speed <75.000000>;
	return (0);
}

RestoreAfterDelay3()
{
	sleep restore_delay;
	turn missilebox1 to y-axis <0.000000> speed <75.000000>;
	turn missilebox1 to x-axis <0.000000> speed <75.000000>;
	return (0);
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn missilebox2 to y-axis <0.000000> speed <75.000000>;
	turn missilebox2 to x-axis <0.000000> speed <75.000000>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn missilebox1 to y-axis heading speed <255.000000>;
	turn missilebox1 to x-axis <0.000000> - pitch speed <230.000000>;
	wait-for-turn missilebox1 around y-axis;
	wait-for-turn missilebox1 around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn missilebox2 to y-axis heading speed <255.000000>;
	turn missilebox2 to x-axis <0.000000> - pitch speed <230.000000>;
	wait-for-turn missilebox2 around y-axis;
	wait-for-turn missilebox2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turretgun1 to y-axis heading speed <200.000000>;
	turn turretgun2 to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turretgun1 around y-axis;
	wait-for-turn turretgun2 around x-axis;
	start-script RestoreAfterDelay1();
	return (1);
}



Shot3()
{
	if( gun_3 == [0] )
	{
		gun_3 = [1];
		return [1];
	}
	if( gun_3 == [1] )
	{
		gun_3 = [0];
		return [1];
	}
}

Shot2()
{
	if( gun_2 == [0] )
	{
		gun_2 = [1];
		return [1];
	}
	if( gun_2 == [1] )
	{
		gun_2 = [0];
		return [1];
	}
}

FirePrimary()
{
	if( gun_1 == [0] )
	{
		move gunbarrel1 to z-axis [-5.000000] now;
		emit-sfx 1024 + 0 from flare1;
		sleep 150;
		wait-for-move gunbarrel1 along z-axis;
		move gunbarrel1 to z-axis [0.000000] speed [12.500000];
		gun_1 = [1];
		return 0;
	}
	if( gun_1 == [1] )
	{
		move gunbarrel2 to z-axis [-5.000000] now;
		emit-sfx 1024 + 0 from flare2;
		sleep 150;
		wait-for-move gunbarrel2 along z-axis;
		move gunbarrel2 to z-axis [0.000000] speed [12.500000];
		gun_1 = [0];
		return 0;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = missilebox1;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = missilebox2;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turretgun1;
	return (0);
}





QueryTertiary(piecenum)
{
	if( gun_3 == [0] )
	{
		piecenum = emit11;
	}
	if( gun_3 == [1] )
	{
		piecenum = emit12;
	}
	return (0);
}

QuerySecondary(piecenum)
{
	if( gun_2 == [0] )
	{
		piecenum = emit21;
	}
	if( gun_2 == [1] )
	{
		piecenum = emit22;
	}
	return (0);
}


QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = flare1;
	}
	if( gun_1 == [1] )
	{
		piecenum = flare2;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	return (0);
}
