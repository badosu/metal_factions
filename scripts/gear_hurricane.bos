#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, bombs, turret, wing1, wing2, tail1,
       thrust, tail2, barrels, thrusta1, thrusta2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


activatescr()
{
	if( TRUE )
	{
		turn wing1 to z-axis <0.000000> now;
		turn wing1 to z-axis <-90.000000> speed <75.000000>;
		turn wing2 to z-axis <0.000000> now;
		turn wing2 to z-axis <90.000000> speed <75.000000>;
		turn tail1 to z-axis <0.000000> now;
		turn tail1 to z-axis <-30.000000> speed <25.000000>;
		Static_Var_6 = 1;
		turn tail2 to z-axis <0.000000> now;
		turn tail2 to z-axis <30.000000> speed <25.000000>;
		sleep 1190;
	}
	sleep 10;
}

Flamers()
{
	while( TRUE )
	{
		if( Static_Var_6 == 1 )
		{
			emit-sfx 1024 + 0 from thrust;
		}
		sleep 1;
	}
	while( FALSE )
	{
	}
}

deactivatescr()
{
	if( TRUE )
	{
		turn wing1 to z-axis <-90.000000> now;
		turn wing1 to z-axis <0.000000> speed <75.000000>;
		turn wing2 to z-axis <90.000000> now;
		turn wing2 to z-axis <0.000000> speed <75.000000>;
		turn tail1 to z-axis <-30.000000> now;
		turn tail1 to z-axis <0.000000> speed <25.000000>;
		Static_Var_6 = 0;
		turn tail2 to z-axis <30.000000> now;
		turn tail2 to z-axis <0.000000> speed <25.000000>;
		sleep 1190;
	}
	sleep 10;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	Static_Var_4 = 1;
	Static_Var_5 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_5 )
	{
		Static_Var_4 = requestedstate;
		return (0);
	}
	Static_Var_5 = 1;
	currentstate = Static_Var_4;
	Static_Var_4 = requestedstate;
	while( Static_Var_4 != currentstate )
	{
		if( Static_Var_4 == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( Static_Var_4 == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	Static_Var_5 = 0;
}

Create()
{
	hide flare1;
	hide flare2;
	Static_Var_2 = 0;
	Static_Var_1 = 3000;
	call-script InitState();
	start-script SmokeUnit();
	start-script Flamers();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn barrels to x-axis <0.000000> speed <50.000000>;
}

QueryPrimary(piecenum)
{
	piecenum = bombs;
}

QuerySecondary(piecenum)
{
	piecenum = Static_Var_2;
}

AimSecondary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <390.000000>;
	Static_Var_3 = pitch;
	if( Static_Var_3 > 0 )
	{
		Static_Var_3 = 0;
	}
	turn barrels to x-axis <0.000000> - Static_Var_3 speed <350.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrels around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( Static_Var_2 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
	if( Static_Var_2 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	Static_Var_2 = !Static_Var_2;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

QueryWeapon3(Func_Var_1)
{
	Func_Var_1 = 3;
}

AimWeapon3(Func_Var_1, Func_Var_2)
{
	signal 4;
	set-signal-mask 4;
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;

	corpsetype = 3;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode wing2 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode tail1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode tail2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
