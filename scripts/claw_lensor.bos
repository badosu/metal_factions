#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<30>
#define PITCH_TOLERANCE		<20>

piece  base,hull,bwingl,bwingr,fwingl,fwingr, ljet, rjet, ljp, rjp, front, turret,sleeve,s1,s2,s3, wingsup, ljp2,rjp2;

static-var  isFlying, statechg_DesiredState, statechg_StateChanging;

#include "aimhelper1.h"

#define SIG_AIM 2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Takeoff()
{
	isFlying = 1;
}

Landing()
{
	isFlying = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			start-script Takeoff();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			start-script Landing();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<150>,<150>);
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn sleeve to x-axis <0.000000> speed <150.000000>;
}

Create()
{
	isFlying = 0;
	turn ljp2 to x-axis <-90.000000> now;
	turn rjp2 to x-axis <-90.000000> now;
	call-script stopAimHelper1(<1000>,<1000>);
	call-script InitState();
	start-script SmokeUnit();
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = sleeve;
}

AimPrimary(heading, pitch)
{
	if (!isFlying) {
		return (0);
	}

	call-script updateAimHelper1(heading,pitch,<100>,<100>,HEADING_TOLERANCE,PITCH_TOLERANCE);	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <100.000000>;
	turn sleeve to x-axis <0.000000>-pitch speed <100.000000>;
	if (!aimReady1 )
	{
		wait-for-turn sleeve around x-axis;
		wait-for-turn turret around y-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{

}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}



Killed(severity, corpsetype)
{
	explode ljet type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode rjet type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode fwingl type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode fwingr type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode bwingl type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode bwingr type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return (3);
}
