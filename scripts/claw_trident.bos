#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base,hull,wingsup,bwingl,bwingr,fwingl,fwingr, fwingl2, fwingr2, weapon1, barrel1,flare1, ljet,rjet, mis1, barrel2, flare2, mis2, barrel3, flare3, mis3, rgun, lgun, cgun,ljp,rjp,cjp;

static-var  Static_Var_2, statechg_DesiredState, statechg_StateChanging,canaim,gun_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Takeoff()
{
	Static_Var_2 = 1;
}

Landing()
{
	turn hull to x-axis <0.000000> speed <70.000000>;
	Static_Var_2 = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			start-script Takeoff();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			start-script Landing();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}



Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	gun_1 = [0];
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
	//turn rgun to y-axis <-30.000000> now;
	//turn lgun to y-axis <30.000000> now;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Shot1()
{
	if (gun_1 == [0])
	{
		move mis1 to z-axis [-4.000000] now;
		emit-sfx 1024+0 from flare1;
		//sleep 100;
		gun_1 = [1];
		sleep 2000;
		move mis1 to z-axis [0.000000] speed [5.000000];
		return (0);
	}
	if (gun_1 == [1])
	{
		move mis2 to z-axis [-4.000000] now;
		emit-sfx 1024+0 from flare2;
		//sleep 100;
		gun_1 = [2];
		sleep 2000;
		move mis2 to z-axis [0.000000] speed [5.000000];
		return (0);
	}
	if (gun_1 == [2])
	{
		move mis3 to z-axis [-4.000000] now;
		emit-sfx 1024+0 from flare3;
		//sleep 100;
		gun_1 = [0];
		sleep 2000;
		move mis3 to z-axis [0.000000] speed [5.000000];
		return (0);
	}	
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0])
	{
		piecenum = flare1;
	}
	if( gun_1 == [1])
	{
		piecenum = flare2;
	}
	if( gun_1 == [2])
	{
		piecenum = flare3;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = weapon1;
	return (0);
}

AimPrimary(heading, pitch)
{
	return (1);
}



FireTertiary()
{
	return 0;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode hull type BITMAPONLY | BITMAP3;
		explode ljet type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode rjet type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode bwingr type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode bwingl type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode hull type BITMAPONLY | BITMAP3;
		explode ljet type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode rjet type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode bwingr type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode bwingl type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode hull type BITMAPONLY | BITMAP3;
		explode ljet type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode rjet type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode bwingr type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode bwingl type SHATTER | EXPLODE_ON_HIT | BITMAP1;

		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode weapon1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hull type BITMAPONLY | BITMAP3;
	explode bwingr type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode bwingl type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode ljet type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode rjet type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
