#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 180

piece  tbase, pelvis, lleg, rleg, torso, head, t2, t3, fork;

static-var  bMoving, Static_Var_2;

// Signal definitions
#define SIG_ACTIVATE			2


walk()
{
	if( bMoving )
	{
		move rleg to y-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [-4.375000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [3.500000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <2.104396> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <-2.104396> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <-2.104396> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 30 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		turn pelvis to x-axis <0.000000> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <0.000000> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <0.000000> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 15 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.500000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to y-axis [0.499985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [-3.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [-0.500000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [2.500000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <-1.049451> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <0.000000> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <1.401099> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 45 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to y-axis [1.124985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [-2.500000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [-1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [1.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <-2.104396> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <2.104396> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 40 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [1.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [-1.250000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [-1.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <-3.159341> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <-4.560440> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <3.516484> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 35 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [2.875000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to y-axis [1.499985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [-2.875000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <-4.571429> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <-5.626374> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <4.571429> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 35 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [1.999985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [1.250000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [-2.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [-1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <-4.214286> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <-19.335165> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <4.214286> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 35 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to y-axis [2.624985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [3.250000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [-1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [-4.375000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <-2.104396> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <2.104396> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 35 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to y-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [4.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <2.104396> speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <-1.747253> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <-2.104396> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 30 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		turn pelvis to x-axis <0.000000> speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <0.000000> speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <0.000000> speed [20.000000] * SPEEDUP_FACTOR / 100;
		sleep 15 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.500000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to y-axis [-0.500000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [2.500000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [0.499985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [-3.875000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <-1.049451> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <1.049451> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 45 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to y-axis [-1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [1.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [1.124985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [-2.500000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <-2.104396> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <2.456044> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 40 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [1.749985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to y-axis [-1.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [1.499985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [-1.249985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <-3.159341> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <3.159341> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <-4.560440> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 35 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [2.875000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to y-axis [-2.750000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to y-axis [1.499985] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [0.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <-4.923077> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <4.923077> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <-5.626374> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 35 * 100 / SPEEDUP_FACTOR;
	}
	if( bMoving )
	{
		move pelvis to y-axis [2.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to y-axis [-2.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rleg to z-axis [-1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move lleg to z-axis [1.250000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		turn pelvis to x-axis <-4.214286> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn rleg to x-axis <4.214286> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg to x-axis <-19.335165> speed <100.000000> * SPEEDUP_FACTOR / 100;
		sleep 35 * 100 / SPEEDUP_FACTOR;
	}
	move pelvis to y-axis [1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
	move rleg to y-axis [-1.000000] speed [20.000000] * SPEEDUP_FACTOR / 100;
	move rleg to z-axis [-4.375000] speed [20.000000] * SPEEDUP_FACTOR / 100;
	move lleg to y-axis [2.624985] speed [20.000000] * SPEEDUP_FACTOR / 100;
	move lleg to z-axis [3.250000] speed [20.000000] * SPEEDUP_FACTOR / 100;
	turn pelvis to x-axis <2.104396> speed <100.000000> * SPEEDUP_FACTOR / 100;
	turn rleg to x-axis <-2.104396> speed <100.000000> * SPEEDUP_FACTOR / 100;
	turn lleg to x-axis <-19.335165> speed <100.000000> * SPEEDUP_FACTOR / 100;
	sleep 35 * 100 / SPEEDUP_FACTOR;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


MotionControl(moving, aiming, justmoved)
{
	while( TRUE )
	{
		justmoved = TRUE;
		while( TRUE )
		{
			moving = bMoving;
			if( moving )
			{
				call-script walk();
				justmoved = TRUE;
			}
			if( !moving )
			{
				if( justmoved )
				{
					move lleg to z-axis [0.000000] speed [20.000000];
					move rleg to z-axis [0.000000] speed [20.000000];
					move lleg to y-axis [0.000000] speed [20.000000];
					move rleg to y-axis [0.000000] speed [20.000000];
					turn lleg to x-axis <0.000000> speed <200.000000>;
					turn rleg to x-axis <0.000000> speed <200.000000>;

					justmoved = FALSE;
				}
				sleep 100;
			}
		}
	}
}

Create()
{
	bMoving = FALSE;
	Static_Var_2 = 1000;
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	spin t3 around y-axis speed <100.021978>;
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	turn t3 to y-axis <0.000000> speed <100.021978>;
	wait-for-turn t3 around y-axis;
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode tbase type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode t2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode t3 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode fork type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode tbase type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode t2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode t3 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode fork type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode tbase type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode t2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode t3 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode fork type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode tbase type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode t2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode t3 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode fork type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
