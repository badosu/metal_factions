#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, b2, weapon1, weapon2, firept1, firept2, lwing, rwing, center,c2, lweapon,rweapon,ljet,rjet,ljet2,rjet2,tbase, lbody,rbody, rw2,lw2, cl, cr, ljp,rjp,ljp2,rjp2, mis1,mis2;

static-var  gun_1, bAiming;

// Signal definitions
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = [0];
	bAiming = FALSE;
	start-script SmokeUnit();
}

Activate()
{
}

Deactivate()
{
}

SweetSpot(piecenum)
{
	piecenum = base;
}



QueryPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum = firept1;
		return 0;
	}
	if(gun_1 == [1])
	{
		piecenum = firept2;
		return 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

Shot1()
{
	if(gun_1 == [0])
	{
		emit-sfx 1024+1 from firept1;
		move mis1 to z-axis [-5.000000] now;
		sleep 100;
		gun_1 = [1];
		sleep 1000;
		move mis1 to z-axis [0.000000] speed [4.000000];
		return 0;
	}
	if(gun_1 == [1])
	{
		emit-sfx 1024+1 from firept2;
		move mis2 to z-axis [-5.000000] now;
		sleep 100;
		gun_1 = [0];
		sleep 1000;
		move mis2 to z-axis [0.000000] speed [4.000000];
		return 0;
	}
}

AimPrimary()
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	bAiming = TRUE;
	return (1);
}


Killed(severity, corpsetype)
{
	corpsetype = 3;
	explode center type SHATTER | BITMAP5;
	explode lw2 type SHATTER | BITMAP5;
	explode rw2 type SHATTER | BITMAP5;
	explode lbody type SHATTER | BITMAP5;
	explode rbody type SHATTER | BITMAP5;
	explode ljet type SHATTER | BITMAP1;
	explode rjet type SHATTER | BITMAP1;
	explode lwing type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode rwing type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode cl type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode cr type SHATTER | EXPLODE_ON_HIT | BITMAP5;

}
