#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2,turret,sleeve, lpack,rpack,lflare1,lflare2,lflare3,rflare1,rflare2,rflare3,l1,l2,l3, floatbase, fb2;

static-var firept1, isFloating;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



Create()
{
	hide floatbase;
	hide fb2;
	isFloating = FALSE;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < [0])
	{
		isFloating = TRUE;
		show floatbase;
		show fb2;
	}
	firept1 = [0];
	start-script SmokeUnit();
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <90.016484>;
	turn sleeve to x-axis <0.000000> speed <50.005495>;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return;
}

QueryPrimary(piecenum)
{
	if(firept1 == [0])
	{
		piecenum = lflare1;
		firept1=[1];
		return;
	}
	if(firept1 == [1])
	{
		piecenum = rflare1;
		firept1=[2];
		return;
	}
	if(firept1 == [2])
	{
		piecenum = lflare2;
		firept1=[3];
		return;
	}
	if(firept1 == [3])
	{
		piecenum = rflare2;
		firept1=[4];
		return;
	}	
	if(firept1 == [4])
	{
		piecenum = lflare3;
		firept1=[5];
		return;
	}
	if(firept1 == [5])
	{
		piecenum = rflare3;
		firept1=[0];
		return;
	}	
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <400.093407>;
	turn sleeve to x-axis <0.000000> - pitch speed <400.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( firept1==[0] || firept1==[1] )
	{
		emit-sfx 1024 + 0 from lflare1;
		emit-sfx 1024 + 0 from rflare1;
		return;
	}
	if( firept1==[2] || firept1==[3])
	{
		
		emit-sfx 1024 + 0 from lflare2;
		emit-sfx 1024 + 0 from rflare2;
		return;
	}
	if( firept1==[4] || firept1==[5])
	{
		
		emit-sfx 1024 + 0 from lflare3;
		emit-sfx 1024 + 0 from rflare3;
		return;
	}
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		if (isFloating) 
		{
			corpsetype = 1;
		}
		if (!isFloating) 
		{
			corpsetype = 2;
		}
		explode lpack type SHATTER | BITMAP1;
		explode rpack type SHATTER | BITMAP1;
		explode turret type SHATTER | BITMAP1;
		return corpsetype;
	}

	corpsetype = 3;
	explode lpack type SHATTER | BITMAP1;
	explode rpack type SHATTER | BITMAP1;
	explode turret type SHATTER | BITMAP1;
	explode base type SHATTER | BITMAP1;
	explode base2 type SHATTER | BITMAP1;
	return corpsetype;
}
