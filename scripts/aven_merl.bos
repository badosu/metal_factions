#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 70

piece  flare1, flare2, base, box, mispt1, mispt2, bwheell, bwheelr, fwheell, fwheelr, bcoverl, bcoverr, fcoverl, fcoverr, b2;

static-var  restore_delay, isOpen, gun_1;

// Signal definitions
#define SIG_AIM				2

#include "wheelspeed.h"



SpinWheels(last)
{
	last = 0;
	while ( TRUE )
	{
		
		if ( last != (wheelSpeed / 8) )
		{
			spin bwheell around x-axis speed wheelSpeed; // accelerate wheelAcceleration;
			spin bwheelr around x-axis speed wheelSpeed; //accelerate wheelAcceleration;
			spin fwheell around x-axis speed wheelSpeed; //accelerate wheelAcceleration;
			spin fwheelr around x-axis speed wheelSpeed; //accelerate wheelAcceleration;
			last = wheelSpeed / 8;
		}
		sleep 100;
	}
	return (0);
}

StopWheels()
{
	stop-spin bwheell around x-axis decelerate <12.000000>;
	stop-spin bwheelr around x-axis decelerate <12.000000>;
	stop-spin fwheell around x-axis decelerate <12.000000>;
	stop-spin fwheelr around x-axis decelerate <12.000000>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	restore_delay = 3000;
	isOpen = FALSE;
	gun_1 = [0];
	set ARMORED to TRUE;
	start-script SmokeUnit();
	start-script WheelSpeedControl();
	start-script SpinWheels();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

Open()
{
	if (!isOpen)
	{
		set ARMORED to FALSE;
		turn box to x-axis <-90.000000> speed <90.000000>;
		wait-for-turn box around x-axis;
		isOpen = TRUE;
	}
}

Close()
{
	if (isOpen)
	{
		isOpen = FALSE;
		turn box to x-axis <0.000000> speed <90.000000>;
		wait-for-turn box around x-axis;
		set ARMORED to TRUE;
		sleep 200;
	}
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script Close();
	return (0);
}



AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (!isOpen)
	{
		call-script Open();
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun_1 == [0])
	{
		emit-sfx 1024 from flare1;
		sleep 100;
		gun_1 = [1];
		return (0);
	}
	if (gun_1 == [1])
	{
		emit-sfx 1024 from flare2;
		sleep 100;
		gun_1 = [0];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = box;
	return (0);
}

QueryPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum = flare1;
		return (0);
	}
	if(gun_1 == [1])
	{
		piecenum = flare2;
		return (0);
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode box type SHATTER | BITMAP4;
		explode mispt1 type SHATTER | BITMAP4;
		explode mispt2 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode box type SHATTER | BITMAP4;
		explode mispt1 type SHATTER | BITMAP4;
		explode mispt2 type SHATTER | BITMAP4;
		explode bwheelr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fwheell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bwheell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fwheelr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode bwheell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fwheelr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode bwheelr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fwheell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode box type SHATTER | BITMAP4;
		explode mispt1 type SHATTER | BITMAP4;
		explode mispt2 type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode bwheell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fwheelr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode bwheelr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fwheell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode box type SHATTER | BITMAP4;
	explode mispt1 type SHATTER | BITMAP4;
	explode mispt2 type SHATTER | BITMAP4;
	
	return (0);
}
