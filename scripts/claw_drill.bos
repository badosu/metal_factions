#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2,turret,holder, sleeve, barrels, flash, floatbase, fb2;

static-var  gun_1,currentHeading, currentPitch, isFloating;

#define HEADING_TOLERANCE	<15.000000>
#define PITCH_TOLERANCE		<25.000000>


// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



Create()
{
	hide floatbase;
	hide fb2;
	isFloating = FALSE;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < [0])
	{
		isFloating = TRUE;
		show floatbase;
		show fb2;
	}
	
	hide flash;
	gun_1=[0];
	currentHeading = <0>;
	currentPitch = <0>;
	start-script SmokeUnit();
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	currentHeading = <0>;
	currentPitch = <0>;
	turn turret to y-axis <0.000000> speed <90.016484>;
	turn sleeve to x-axis <0.000000> speed <50.005495>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <420.038462>;
	turn sleeve to x-axis <0.000000> - pitch speed <450.000000>;
	if ( get ABS(heading - currentHeading)  > HEADING_TOLERANCE || get ABS(pitch - currentPitch) > PITCH_TOLERANCE )
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
		currentHeading = heading;
		currentPitch = pitch;
	}
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	emit-sfx 1024 + 0 from flash;
	sleep 10;
	
	// turn barrel to next position
	if( gun_1 == [0] )
	{
		sleep 10;
		turn barrels to z-axis <60.000000> speed <1200.000000>;
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1] )
	{
		sleep 10;
		turn barrels to z-axis <120.000000> speed <1200.000000>;
		gun_1 = [2];
		return (0);
	}
	if( gun_1 == [2] )
	{
		sleep 10;
		turn barrels to z-axis <180.000000> speed <1200.000000>;
		gun_1 = [3];
		return (0);
	}
	if( gun_1 == [3] )
	{
		sleep 10;
		turn barrels to z-axis <240.000000> speed <1200.000000>;
		gun_1 = [4];
		return (0);
	}
	if( gun_1 == [4] )
	{
		sleep 10;
		turn barrels to z-axis <300.000000> speed <1200.000000>;
		gun_1 = [5];
		return (0);
	}
		if( gun_1 == [5] )
	{
		sleep 10;
		turn barrels to z-axis <360.000000> speed <1200.000000>;
		gun_1 = [0];
		return (0);
	}
			
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flash;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		if (isFloating) 
		{
			corpsetype = 1;
		}
		if (!isFloating) 
		{
			corpsetype = 2;
		}
		explode barrels type SHATTER | BITMAP1;
		explode sleeve type SHATTER | BITMAP1;
		explode turret type SHATTER | BITMAP1;
		return corpsetype;
	}

	corpsetype = 3;
	explode barrels type SHATTER | BITMAP1;
	explode sleeve type SHATTER | BITMAP1;
	explode turret type SHATTER | BITMAP1;
	explode base2 type SHATTER | BITMAP1;
	explode holder type SHATTER | BITMAP1;
	return corpsetype;
}
