#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base,hull,bottom,wingsup,wing1,wing2, weapon1, barrel1,flare1,weapon2,barrel2,flare2,shieldpt, jet, jet2, jet3, ljp, rjp, cjp,bweapon,bflare, lfirept,rfirept;

static-var  isFlying, statechg_DesiredState, statechg_StateChanging,gun_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Takeoff()
{
	isFlying = 1;
}

Landing()
{
	turn hull to x-axis <0.000000> speed <70.000000>;
	isFlying = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			start-script Takeoff();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			start-script Landing();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}



Create()
{
	hide flare1;
	hide flare2;
	isFlying = 0;
	gun_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

FirePrimary()
{
	if (gun_1 == 0)	{
		emit-sfx 1024+0 from flare1;
		sleep 30;
		gun_1 = 1;
		return (0);
	}
	if (gun_1 == 1)	{
		emit-sfx 1024+0 from flare2;
		sleep 30;
		gun_1 = 0;
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0) {
		piecenum = flare1;
		return (0);
	}
	if (gun_1 == 1) {
		piecenum = flare2;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	if (gun_1 == 0) {
		piecenum = weapon1;
		return (0);
	}
	if (gun_1 == 1) {
		piecenum = weapon2;
		return (0);
	}
}

AimPrimary(heading, pitch)
{
	if (!isFlying) {
		return (0);
	}
	return (1);
}

FireSecondary()
{
	emit-sfx 1024+1 from lfirept;
}

QuerySecondary(piecenum)
{
	piecenum = lfirept;
}

AimFromSecondary(piecenum)
{
	piecenum = lfirept;
	return (0);
}

AimSecondary(heading, pitch)
{
	if (!isFlying) {
		return (0);
	}
	return (1);
}


FireTertiary()
{
	emit-sfx 1024+1 from rfirept;
}

QueryTertiary(piecenum)
{
	piecenum = rfirept;
}

AimFromTertiary(piecenum)
{
	piecenum = rfirept;
	return (0);
}

AimTertiary(heading, pitch)
{
	if (!isFlying) {
		return (0);
	}
	return (1);
}

FireWeapon4()
{
	return 0;
}

QueryWeapon4(piecenum)
{
	piecenum=shieldpt;
}

AimFromWeapon4(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimWeapon4(heading, pitch)
{
	return (1);
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode weapon2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode hull type BITMAPONLY | BITMAP3;
		explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode weapon2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode hull type BITMAPONLY | BITMAP3;
		explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode weapon1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode weapon2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode hull type BITMAPONLY | BITMAP3;
		explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode weapon1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode weapon2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode hull type BITMAPONLY | BITMAP3;
	explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
