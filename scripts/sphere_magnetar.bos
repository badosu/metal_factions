#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


piece ground, hips,torso,turret1,sleeve1,flare1,turret2,sleeve2,flare2,turret3,sleeve3,flare3, sphere, shieldpt;

	
static-var bMoving,bAiming, normalSpeed, slowSpeed, isReloading, reloadTime, liftoffDisable;

// Signal definitions
#define SIG_AIM					2
#define SIG_AIM2				4
#define SIG_AIM3				8

lua_delayReload() { return 0; }

SetMaxReloadTime(Func_Var_1)
{
	reloadTime = Func_Var_1;
	return (0);
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from sphere;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


ShowEffect()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	sleep 400 * 30;
	while (TRUE)
	{
		if ( !isReloading )
		{
			emit-sfx 1024+0 from flare1;
		
			// show aura effect too
			if (get ACTIVATION) {
				emit-sfx 1024+1 from flare1;
			}
		}
		sleep 20;
	}
}


delayReload() {
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 30;
	}
	call-script lua_delayReload(450); // delay activation for 15 seconds
}

Create()
{
	reloadTime = 80000;
	
	isReloading = FALSE;
	bMoving = FALSE;
	bAiming = FALSE;
	liftoffDisable = FALSE;
	start-script ShowEffect();
	start-script SmokeUnit();
	start-script delayReload();
}

StartMoving()
{
 	// deactivate to compensate for the unwanted activation when lifting off after being built
 	// do this only once
	if (!liftoffDisable)
	{
		liftoffDisable = TRUE;
		set ACTIVATION to FALSE; 
	}
}

SweetSpot(piecenum)
{
	piecenum = sphere;
}

RestoreAfterDelayWeapon()
{
	sleep 5000;
	turn turret1 to y-axis <0.000000> speed <65.016484>;
	turn sleeve1 to x-axis <0.000000> speed <65.005495>;
}


AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

FirePrimary()
{
	isReloading = TRUE;
	sleep reloadTime;
	isReloading = FALSE;
	return 1;
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	return (1);
}



QuerySecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimSecondary(heading, pitch)
{
	return (1);
}


Killed(severity, corpsetype)
{
	
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sphere type SHATTER | BITMAP4;
		explode sphere type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode sphere type SHATTER | BITMAP4;
		explode sphere type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode sphere type SHATTER | BITMAP4;
		explode sphere type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode sphere type SHATTER | BITMAP4;
	explode sphere type SHATTER | BITMAP4;
		
}

