#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flash1, flash2, base, turret, barrel1, barrel2, sleeves;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flash1;
	hide flash2;
	dont-cache flash1;
	dont-cache flash2;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache sleeves;
	dont-cache turret;
	dont-shade flash1;
	dont-shade flash2;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade sleeves;
	dont-shade turret;
	gun_1 = flash1;
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <30.005495>;
	turn sleeves to x-axis <0.000000> - pitch speed <45.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-6.250000] now;
		emit-sfx 1024 + 0 from flash1;
		sleep 150;
		move barrel1 to z-axis [0.000000] speed [2.500000];
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-6.250000] now;
		emit-sfx 1024 + 0 from flash2;
		sleep 150;
		move barrel2 to z-axis [0.000000] speed [2.500000];
	}
	gun_1 = !gun_1;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flash1;
	hide flash2;
	if( severity <= 50 )
	{
		explode barrel1 type SHATTER;
		explode barrel2 type SHATTER;
		return (1);
	}

	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type SHATTER;
	explode sleeves type SHATTER;
	explode turret type SHATTER;

	return (2);
}
