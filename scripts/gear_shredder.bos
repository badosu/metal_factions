#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flarer, flarel, emittera1, emittera2, emitterb1, emitterb2, ma1,ma2,mb1,mb2, base, boxb, boxa, turret2,
       turreta, turretb, wakel, waker, guns, guns2, platforma, turret1,
       turretgun;

static-var  gun_1, gun_2, gun_3, restore_delay;

// Signal definitions
#define SIG_AIM_3			2
#define SIG_AIM_2			4
#define SIG_AIM				8
#define SIG_MOVE			16


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flarel;
	hide flarer;
	gun_1 = [0];
	gun_2 = [0];
	gun_3 = [0];
	restore_delay = 3000;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
	return (0);
}


RestoreAfterDelay1()
{
	sleep restore_delay;
	turn turret2 to y-axis <0.000000> speed <75.000000>;
	turn turret2 to x-axis <0.000000> speed <75.000000>;
	return (0);
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn turretb to y-axis <0.000000> speed <75.000000>;
	turn boxb to x-axis <0.000000> speed <75.000000>;
	return (0);
}

RestoreAfterDelay3()
{
	sleep restore_delay;
	turn turreta to y-axis <0.000000> speed <75.000000>;
	turn boxa to x-axis <0.000000> speed <75.000000>;
	return (0);
}



StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 4 from wakel;
		emit-sfx 2 from waker;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turreta to y-axis heading speed <255.000000>;
	turn boxa to x-axis <0.000000> - pitch speed <230.000000>;
	wait-for-turn turreta around y-axis;
	wait-for-turn boxa around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turretb to y-axis heading speed <255.000000>;
	turn boxb to x-axis <0.000000> - pitch speed <230.000000>;
	wait-for-turn turretb around y-axis;
	wait-for-turn boxb around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret2 to y-axis heading speed <200.000000>;
	turn turret2 to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RestoreAfterDelay1();
	return (1);
}


Shot3()
{
	if( gun_3 == [0] )
	{
		gun_3 = [1];
		return [1];
	}
	if( gun_3 == [1] )
	{
		gun_3 = [0];
		return [1];
	}
}

Shot2()
{
	if( gun_2 == [0] )
	{
		gun_2 = [1];
		return [1];
	}
	if( gun_2 == [1] )
	{
		gun_2 = [0];
		return [1];
	}
}

FirePrimary()
{
	if( gun_1 == [0] )
	{
		emit-sfx 1024 + 0 from flarer;
		move guns to z-axis [-7.500000] now;
		sleep 150;
		wait-for-move guns along z-axis;
		move guns to z-axis [0.000000] speed [7.500000];
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1] )
	{
		emit-sfx 1024 + 0 from flarel;
		move guns2 to z-axis [-7.500000] now;
		sleep 150;
		wait-for-move guns2 along z-axis;
		move guns2 to z-axis [0.000000] speed [7.500000];
		gun_1 = [0];
		return (0);
	}
	
}

AimFromTertiary(piecenum)
{
	piecenum = turreta;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turretb;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret2;
	return (0);
}

QueryTertiary(piecenum)
{
	if( gun_3 == [0] )
	{
		piecenum = emittera1;
	}
	if( gun_3 == [1] )
	{
		piecenum = emittera2;
	}
	return (0);
}

QuerySecondary(piecenum)
{
	if( gun_2 == [0] )
	{
		piecenum = emitterb1;
	}
	if( gun_2 == [1] )
	{
		piecenum = emitterb2;
	}
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = flarer;
	}
	if( gun_1 == [1] )
	{
		piecenum = flarel;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode boxa type BITMAPONLY | BITMAP2;
		explode boxb type BITMAPONLY | BITMAP3;
		explode flarel type BITMAPONLY | BITMAP1;
		explode flarer type BITMAPONLY | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode guns2 type BITMAPONLY | BITMAP4;
		explode platforma type BITMAPONLY | BITMAP5;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode turreta type BITMAPONLY | BITMAP3;
		explode turretb type BITMAPONLY | BITMAP4;
		explode turretgun type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode boxa type SHATTER | BITMAP2;
		explode boxb type BITMAPONLY | BITMAP3;
		explode flarel type FALL | BITMAP1;
		explode flarer type FALL | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode guns2 type BITMAPONLY | BITMAP4;
		explode platforma type BITMAPONLY | BITMAP5;
		explode turret1 type FALL | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode turreta type FALL | BITMAP3;
		explode turretb type FALL | BITMAP4;
		explode turretgun type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode boxa type SHATTER | BITMAP2;
		explode boxb type BITMAPONLY | BITMAP3;
		explode flarel type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode flarer type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode guns type BITMAPONLY | BITMAP3;
		explode guns2 type BITMAPONLY | BITMAP4;
		explode platforma type BITMAPONLY | BITMAP5;
		explode turret1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode turreta type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode turretb type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode turretgun type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode boxa type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode boxb type BITMAPONLY | BITMAP3;
	explode flarel type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode flarer type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode guns type BITMAPONLY | BITMAP3;
	explode guns2 type BITMAPONLY | BITMAP4;
	explode platforma type BITMAPONLY | BITMAP5;
	explode turret1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type BITMAPONLY | BITMAP2;
	explode turreta type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode turretb type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode turretgun type BITMAPONLY | BITMAP5;
	return (0);
}
