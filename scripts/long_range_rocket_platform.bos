#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, silo1,silo2,silo3,silo4,pad, b2, nano, beam1,beam2,beam3,beam4,beam5,beam6,base1,base2,base3,base4,floatbase,fb2,fb3;

static-var  emitPiece, statechg_DesiredState, statechg_StateChanging, padNum, isFloating;

// Signal definitions
#define SIG_ACTIVATE			2

activatescr() {

	sleep 20;
}

deactivatescr() {

	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype) {
	while( get BUILD_PERCENT_LEFT ) {
		sleep 400;
	}
	while( TRUE ) {
		healthpercent = get HEALTH;
		if( healthpercent < 66 ) {
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent ) {
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 ) {
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard() {
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard() {
	set YARD_OPEN to 0;
	while( get YARD_OPEN ) {
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go() {
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop() {
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState() {
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate) {
	if( statechg_StateChanging ) {
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate ){
		if( statechg_DesiredState == 0 ) {
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 ) {
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create() {
	emitPiece = [0];
	hide floatbase;
	hide fb2;
	hide fb3;
	isFloating = FALSE;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < [0])
	{
		isFloating = TRUE;
		show floatbase;
		show fb2;
		show fb3;
	}	
	padNum = 1;

	move nano to y-axis [45] now;
	spin nano around y-axis speed <1000.000000>;

	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum) {
	if( emitPiece == [0] ) {
		piecenum = beam1;
		emitPiece = [1];
		return (0);
	}
	if( emitPiece == [1] ) {
		piecenum = beam2;
		emitPiece = [2];
		return (0);
	}
	if( emitPiece == [2] ) {
		piecenum = beam3;
		emitPiece = [3];
		return (0);
	}
	if( emitPiece == [3] ) {
		piecenum = beam4;
		emitPiece = [4];
		return (0);
	}
	if( emitPiece == [4] ) {
		piecenum = beam5;
		emitPiece = [5];
		return (0);
	}
	if( emitPiece == [5] )
	{
		piecenum = beam6;
		emitPiece = [0];
		return (0);
	}

}

Activate() {
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate() {
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding() {
}

StopBuilding() {
}

// called from lua gadget
SetPad(pn) {
	if (pn > 0) {
		padNum = pn;
	}
	//get PRINT(padNum);
}

QueryBuildInfo(piecenum) {
	piecenum = silo1;
	if(padNum == 1) {
		piecenum = silo1;
		move nano to x-axis [28] now;
		move nano to z-axis [-28] now;
	}
	if(padNum == 2) {
		piecenum = silo2;
		move nano to x-axis [-28] now;
		move nano to z-axis [-28] now;
	}
	if(padNum == 3) {
		piecenum = silo3;
		move nano to x-axis [-28] now;
		move nano to z-axis [28] now;
	}
	if(padNum == 4) {
		piecenum = silo4;
		move nano to x-axis [28] now;
		move nano to z-axis [28] now;
	}
}

SweetSpot(piecenum) {
	piecenum = base;
}

Killed(severity, corpsetype) {
	if( severity <= 50 )
	{
		if (isFloating) 
		{
			corpsetype = 1;
		}
		if (!isFloating) 
		{
			corpsetype = 2;
		}
		explode base1 type SHATTER;
		explode base2 type SHATTER;
		explode base3 type SHATTER;
		explode base4 type SHATTER;
		return corpsetype;
	}

	corpsetype = 3;
	explode pad type SHATTER;
	explode b2 type SHATTER;
	explode nano type SHATTER;
	explode base1 type SHATTER;
	explode base2 type SHATTER;
	explode base3 type SHATTER;
	explode base4 type SHATTER;
	return corpsetype;
}
